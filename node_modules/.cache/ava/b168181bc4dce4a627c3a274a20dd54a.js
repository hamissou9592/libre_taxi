'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LibreTaxi, free and open source ride sharing platform.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Copyright (C) 2016-2017  Roman Pushkin
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            it under the terms of the GNU Affero General Public License as
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            published by the Free Software Foundation, either version 3 of the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GNU Affero General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            You should have received a copy of the GNU Affero General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        */

/* eslint-disable no-new, max-len, arrow-body-style, no-param-reassign */


var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _notifyDriver = require('../../../src/response-handlers/support/notify-driver');

var _notifyDriver2 = _interopRequireDefault(_notifyDriver);

var _specSupport = require('../../spec-support');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('can be constructed with default parameters', function (t) {
  new _notifyDriver2.default();
  t.pass();
});

var loadUser = function loadUser(user) {
  var then = function then(f) {
    f(user);
  };
  return function () {
    return { then: then };
  };
};

var shouldFail = function shouldFail(t, failReason, user, order) {
  t.plan(1);
  if (!order.isNotified) order.isNotified = function () {
    return false;
  };
  var successCallback = function successCallback() {
    t.fail();
  };
  var failCallback = function failCallback(reason) {
    var _rec = new _powerAssertRecorder(),
        _rec2 = new _powerAssertRecorder();

    t.is(_rec._expr(_rec._capt(reason, 'arguments/0'), {
      content: 't.is(reason, failReason)',
      filepath: 'test/response-handlers/support/notify-driver-test.js',
      line: 40
    }), _rec2._expr(_rec2._capt(failReason, 'arguments/1'), {
      content: 't.is(reason, failReason)',
      filepath: 'test/response-handlers/support/notify-driver-test.js',
      line: 40
    }));t.end();
  };
  var subject = new _notifyDriver2.default({ successCallback: successCallback, failCallback: failCallback, loadUser: loadUser(user) });
  subject.call('cli_1', 1, order);
};

_ava2.default.cb('should not notify driver when order is not new', function (t) {
  shouldFail(t, 'order is not new', {}, { state: { status: 'old' } });
});

_ava2.default.cb('should not notify driver when order is stale', function (t) {
  shouldFail(t, 'order is stale', {}, { state: { status: 'new', createdAt: new Date().getTime() - 15 * 60 * 1000 - 1 } });
});

_ava2.default.cb('should not notify driver when driver was notified already', function (t) {
  var isNotified = function isNotified() {
    return true;
  };
  shouldFail(t, 'driver was already notified', {}, { state: { status: 'new', createdAt: new Date().getTime() }, isNotified: isNotified });
});

_ava2.default.cb('should not notify driver when userType is not \'driver\'', function (t) {
  shouldFail(t, 'userType is not \'driver\'', { state: { userType: 'passenger' } }, { state: { status: 'new', createdAt: new Date().getTime() } });
});

_ava2.default.cb('should not notify driver when driver is muted', function (t) {
  shouldFail(t, 'driver is muted', { state: { userType: 'driver', muted: true } }, { state: { status: 'new', createdAt: new Date().getTime() } });
});

_ava2.default.cb('should not notify driver when vehicle types don\'t match', function (t) {
  shouldFail(t, 'vehicle types don\'t match', { state: { userType: 'driver', vehicleType: 'motorbike' } }, { state: { status: 'new', requestedVehicleType: 'car', createdAt: new Date().getTime() } });
});

_ava2.default.cb('should not notify driver when driver is busy', function (t) {
  shouldFail(t, 'driver is busy', { state: { userType: 'driver', vehicleType: 'car', menuLocation: 'settings' } }, { state: { status: 'new', requestedVehicleType: 'car', createdAt: new Date().getTime() } });
});

_ava2.default.cb('should not notify driver when radius is less than distance to passenger', function (t) {
  shouldFail(t, 'distance 1 is greater than driver\'s preferred radius 0.5', {
    state: {
      userType: 'driver',
      vehicleType: 'car',
      menuLocation: 'driver-index',
      radius: 0.5
    }
  }, { state: { status: 'new', requestedVehicleType: 'car', createdAt: new Date().getTime() } });
});

_ava2.default.cb('should notify driver when matched', function (t) {
  t.plan(3);
  var saveSpy = _specSupport.ss.sinon.spy();
  var markNotifiedSpy = _specSupport.ss.sinon.spy();
  var queue = { create: _specSupport.ss.sinon.spy() };
  var successCallback = function successCallback() {
    var _rec3 = new _powerAssertRecorder(),
        _rec4 = new _powerAssertRecorder(),
        _rec5 = new _powerAssertRecorder();

    t.truthy(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(queue, 'arguments/0/callee/object/object').create, 'arguments/0/callee/object').calledWith(_rec3._capt({
      userKey: 'cli_1',
      arg: _rec3._capt({
        orderKey: 123,
        distance: 1,
        from: _rec3._capt([1, 2], 'arguments/0/arguments/0/properties/1/value/properties/2/value'),
        to: 'foobar',
        price: 50,
        passengerKey: 'cli_123'
      }, 'arguments/0/arguments/0/properties/1/value'),
      route: 'driver-order-new'
    }, 'arguments/0/arguments/0')), 'arguments/0'), {
      content: 't.truthy(queue.create.calledWith({ userKey: \'cli_1\', arg: { orderKey: 123, distance: 1, from: [1, 2], to: \'foobar\', price: 50, passengerKey: \'cli_123\' }, route: \'driver-order-new\' }))',
      filepath: 'test/response-handlers/support/notify-driver-test.js',
      line: 126
    }));
    t.truthy(_rec4._expr(_rec4._capt(_rec4._capt(saveSpy, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
      content: 't.truthy(saveSpy.calledWith())',
      filepath: 'test/response-handlers/support/notify-driver-test.js',
      line: 138
    }));
    t.truthy(_rec5._expr(_rec5._capt(_rec5._capt(markNotifiedSpy, 'arguments/0/callee/object').calledWith('cli_1'), 'arguments/0'), {
      content: 't.truthy(markNotifiedSpy.calledWith(\'cli_1\'))',
      filepath: 'test/response-handlers/support/notify-driver-test.js',
      line: 139
    }));
    t.end();
  };
  var failCallback = function failCallback() {
    t.fail();
  };
  var order = {
    orderKey: 123,
    state: {
      status: 'new',
      requestedVehicleType: 'car',
      passengerLocation: [1, 2],
      passengerDestination: 'foobar',
      price: 50,
      passengerKey: 'cli_123',
      createdAt: new Date().getTime()
    },
    save: saveSpy,
    isNotified: function isNotified() {
      return false;
    },
    markNotified: markNotifiedSpy
  };
  var user = {
    state: {
      radius: 1,
      userType: 'driver',
      vehicleType: 'car',
      menuLocation: 'driver-index'
    }
  };
  var subject = new _notifyDriver2.default({
    successCallback: successCallback,
    failCallback: failCallback,
    loadUser: loadUser(user),
    queue: queue
  });
  subject.call('cli_1', 1, order);
});
//# sourceMappingURL=../../../node_modules/.cache/ava/b168181bc4dce4a627c3a274a20dd54a.js.map