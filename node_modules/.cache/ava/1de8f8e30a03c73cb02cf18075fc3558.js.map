{"version":3,"sources":["error-response-handler-test.js"],"names":["args","response","t","pass","cb","r","message","h","tmp","console","log","sinon","spy","call","truthy","calledWith","end"],"mappings":";;weAAA;;;;;;;;;;;;;;;;;;AAkBA;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,4BAAiB,UAAjB,EAA6B,UAACA,IAAD,EAAU;AAAE,qCAAyBA,IAAzB;AAAiC,CAA1E;;AAEA,mBAAK,4CAAL,EAAmD,aAAK;AACtD,qCAAyB,EAAEC,UAAU,EAAZ,EAAzB;AACAC,IAAEC,IAAF;AACD,CAHD;;AAKA,cAAKC,EAAL,CAAQ,8CAAR,EAAwD,aAAK;AAC3D;AACA,MAAMC,IAAI,EAAEC,SAAS,KAAX,EAAV;AACA,MAAMC,IAAI,mCAAyB,EAAEN,UAAUI,CAAZ,EAAzB,CAAV;AACA,MAAMG,MAAMC,QAAQC,GAApB;AACAD,UAAQC,GAAR,GAAc,gBAAGC,KAAH,CAASC,GAAT,EAAd;;AAEA;AACAL,IAAEM,IAAF,CAAO,YAAM;AAAA;;AACX;AACAX,MAAEY,MAAF,uBAAS,mEAAQJ,GAAR,+BAAYK,UAAZ,CAAuB,OAAvB,CAAT;AAAA;AAAA;AAAA;AAAA;AACAN,YAAQC,GAAR,GAAcF,GAAd;AACAN,MAAEc,GAAF;AACD,GALD;AAMD,CAdD","file":"error-response-handler-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new, no-console */\nimport test from 'ava';\nimport ErrorResponseHandler from '../../../src/response-handlers/cli/error-response-handler';\nimport checkNotNullTest from '../../helpers/check-not-null.js';\nimport { ss } from '../../spec-support';\n\ncheckNotNullTest('response', (args) => { new ErrorResponseHandler(args); });\n\ntest('can be constructed with default parameters', t => {\n  new ErrorResponseHandler({ response: {} });\n  t.pass();\n});\n\ntest.cb('prints the message with crossmark to console', t => {\n  // arrange\n  const r = { message: 'foo' };\n  const h = new ErrorResponseHandler({ response: r });\n  const tmp = console.log;\n  console.log = ss.sinon.spy();\n\n  // act\n  h.call(() => {\n    // assert\n    t.truthy(console.log.calledWith('‚ùå foo'));\n    console.log = tmp;\n    t.end();\n  });\n});\n"]}