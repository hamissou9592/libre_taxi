{"version":3,"sources":["checkin-response-handler-test.js"],"names":["STATEFUL_CONNSTR","STATEFUL_CREDENTIALS_FILE","undefined","server","response","driverKey","before","users","cli_1","userType","orders","foo","after","always","close","args","t","pass","cb","plan","assert","is","driver","userKey","truthy","queryOrders","calledWith","end","handler","sinon","spy","call","geoFireQuery","on","geoFire","query","stub","returns","state","location","radius","center","keyEntered","notifyDriver","then","order"],"mappings":"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","file":"checkin-response-handler-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new, no-unused-vars, max-len, no-use-before-define */\nimport test from 'ava';\nimport CheckinResponseHandler from '../../src/response-handlers/checkin-response-handler';\nimport CheckinResponse from '../../src/responses/checkin-response';\nimport checkNotNullTest from '../helpers/check-not-null.js';\nimport FirebaseServer from 'firebase-server';\nimport firebaseDB, { overrideSettings } from '../../src/firebase-db';\nimport { ss } from '../spec-support';\nimport sinon from 'sinon';\nimport { loadUser } from '../../src/factories/user-factory';\nimport { loadOrder } from '../../src/factories/order-factory';\n\noverrideSettings({\n  STATEFUL_CONNSTR: 'ws://localhost.firebaseio.test:5506',\n  STATEFUL_CREDENTIALS_FILE: undefined,\n});\n\nlet server = null;\nconst response = new CheckinResponse({ driverKey: 'cli_1' });\n\ntest.before(() => {\n  server = new FirebaseServer(5506, 'localhost.firebaseio.test', {\n    users: {\n      cli_1: {\n        userType: 'driver',\n      },\n    },\n    orders: {\n      '53845282-693f-4e7a-8479-87d421db6b94': {\n        foo: 'bar',\n      },\n    },\n  });\n});\n\ntest.after.always('guaranteed cleanup', () => {\n  server.close();\n});\n\ncheckNotNullTest('response', (args) => { new CheckinResponseHandler(args); });\n\ntest('can be constructed with default parameters', t => {\n  new CheckinResponseHandler({ response: {} });\n  t.pass();\n});\n\ntest.cb('should load driver and query orders when called', t => {\n  t.plan(2);\n\n  const assert = () => {\n    t.is(handler.driver.userKey, 'cli_1');\n    t.truthy(handler.queryOrders.calledWith());\n    t.end();\n  };\n\n  const handler = new CheckinResponseHandler({ response });\n  handler.queryOrders = ss.sinon.spy();\n  handler.call(assert);\n});\n\ntest('should query orders with geofire and setup key_entered callback', t => {\n  const handler = new CheckinResponseHandler({ response });\n  const geoFireQuery = {\n    on: ss.sinon.spy(),\n  };\n  handler.geoFire = {\n    query: ss.sinon.stub().returns(geoFireQuery),\n  };\n  handler.driver = { state: { location: 'foo', radius: '5' } };\n  handler.queryOrders();\n  t.truthy(handler.geoFire.query.calledWith({ center: 'foo', radius: 5 }));\n  t.truthy(geoFireQuery.on.calledWith('key_entered', handler.keyEntered));\n});\n\ntest.cb('should call notify driver method on key_entered callback', t => {\n  t.plan(1);\n  const spy = ss.sinon.spy();\n  const handler = new CheckinResponseHandler({ response, notifyDriver: { call: spy } });\n  handler.driver = { userKey: 'cli_1' };\n  handler.keyEntered('53845282-693f-4e7a-8479-87d421db6b94', 'location', 'distance');\n  loadOrder('53845282-693f-4e7a-8479-87d421db6b94').then((order) => {\n    t.truthy(spy.calledWith('cli_1', 'distance', order));\n    t.end();\n  });\n});\n"]}