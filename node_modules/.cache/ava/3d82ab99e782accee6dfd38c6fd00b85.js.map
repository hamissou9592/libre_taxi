{"version":3,"sources":["action-test.js"],"names":["args","user","i18n","type","t","pass","cb","err","action","throws","post","get","end","truthy","state","a","is","call","arg","gt"],"mappings":"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","file":"action-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new */\nimport test from 'ava';\nimport Action from '../src/action';\nimport checkNotNullTest from './helpers/check-not-null.js';\nimport { i18n } from './spec-support';\n\ncheckNotNullTest(['i18n', 'type', 'user'], (args) => { new Action(args); });\nconst user = {};\n\ntest('can be constructed with default parameters', t => {\n  new Action({ i18n, type: 'foo', user });\n  t.pass();\n});\n\ntest.cb('should throw error when for missing methods', t => {\n  const err = 'not implemented';\n  const action = new Action({ i18n, type: 'foo', user });\n\n  t.throws(() => { action.post(); }, err);\n  t.throws(() => { action.get(); }, err);\n\n  t.end();\n});\n\ntest('should set state if not specified', t => {\n  const action = new Action({ i18n, type: 'foo', user });\n  t.truthy(action.state);\n  t.pass();\n});\n\ntest('should set state if specified', t => {\n  const action = new Action({ i18n, state: { a: 1 }, type: 'foo', user });\n  t.is(action.state.a, 1);\n  t.pass();\n});\n\ntest.cb('should call get on `call` when arg is not provided', t => {\n  const action = new Action({ i18n, type: 'foo', user });\n  action.get = () => {\n    t.pass();\n    t.end();\n  };\n  action.call();\n});\n\ntest.cb('should call post on `call` when arg is provided', t => {\n  const action = new Action({ i18n, type: 'foo', user });\n  action.post = (arg) => {\n    t.is(arg, 123);\n    t.end();\n  };\n  action.call(123);\n});\n\ntest('translation helper method should work', t => {\n  const action = new Action({ i18n, type: 'select-user-type', user });\n  t.is(action.t('who_you_are'), 'Who are you? (you can change this later)');\n});\n\ntest('global translation helper method should work', t => {\n  const action = new Action({ i18n, type: 'foo', user });\n  t.is(action.gt('location_button_text'), 'Send location');\n});\n"]}