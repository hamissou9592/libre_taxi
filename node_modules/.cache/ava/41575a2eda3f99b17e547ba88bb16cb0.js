'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LibreTaxi, free and open source ride sharing platform.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Copyright (C) 2016-2017  Roman Pushkin
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            it under the terms of the GNU Affero General Public License as
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            published by the Free Software Foundation, either version 3 of the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            but WITHOUT ANY WARRANTY; without even the implied warranty of
or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GNU Affero General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            You should have received a copy of the GNU Affero General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        */

/* eslint-disable no-new, no-unused-vars */
// to aviod circular dependencies


var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _routes = require('../../../src/routes');

var _routes2 = _interopRequireDefault(_routes);

var _lookupAddress = require('../../../src/actions/decorators/lookup-address');

var _lookupAddress2 = _interopRequireDefault(_lookupAddress);

var _specSupport = require('../../spec-support');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultParams = { type: 'foo', i18n: {}, user: {} };
var address = '702 marshal street, redwood city';
var settings = { GEOCODING_API_KEY: 31337 };

var origin = void 0;
_ava2.default.beforeEach(function () {
  origin = {
    get: _specSupport.ss.sinon.spy(),
    post: _specSupport.ss.sinon.spy(),
    t: _specSupport.ss.sinon.spy(),
    gt: _specSupport.ss.sinon.spy()
  };
});

(0, _ava2.default)('can be constructed with default parameters', function (t) {
  var action = new _lookupAddress2.default(defaultParams, origin);
  t.pass();
});

(0, _ava2.default)('should just call origin on get', function (t) {
  var _rec = new _powerAssertRecorder(),
      _rec2 = new _powerAssertRecorder();

  var action = new _lookupAddress2.default(defaultParams, origin);
  action.get();
  t.truthy(_rec._expr(_rec._capt(_rec._capt(_rec._capt(origin, 'arguments/0/callee/object/object').get, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.truthy(origin.get.calledWith())',
    filepath: 'test/menu/decorators/lookup-address-test.js',
    line: 47
  }));
  t.falsy(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(origin, 'arguments/0/callee/object/object').post, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.falsy(origin.post.calledWith())',
    filepath: 'test/menu/decorators/lookup-address-test.js',
    line: 48
  }));
});

(0, _ava2.default)('should just call origin on t, gt with parameters', function (t) {
  var _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder();

  var action = new _lookupAddress2.default(defaultParams, origin);
  action.t(1, 2, 3);
  action.gt(11, 22, 33);
  t.truthy(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(origin, 'arguments/0/callee/object/object').t, 'arguments/0/callee/object').calledWith(1, 2, 3), 'arguments/0'), {
    content: 't.truthy(origin.t.calledWith(1, 2, 3))',
    filepath: 'test/menu/decorators/lookup-address-test.js',
    line: 55
  }));
  t.truthy(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(origin, 'arguments/0/callee/object/object').gt, 'arguments/0/callee/object').calledWith(11, 22, 33), 'arguments/0'), {
    content: 't.truthy(origin.gt.calledWith(11, 22, 33))',
    filepath: 'test/menu/decorators/lookup-address-test.js',
    line: 56
  }));
});

(0, _ava2.default)('should call "get" on "call" when no argument provided', function (t) {
  var _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder();

  var action = new _lookupAddress2.default(defaultParams, origin);
  action.call();
  t.truthy(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(origin, 'arguments/0/callee/object/object').get, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.truthy(origin.get.calledWith())',
    filepath: 'test/menu/decorators/lookup-address-test.js',
    line: 62
  }));
  t.falsy(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(origin, 'arguments/0/callee/object/object').post, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.falsy(origin.post.calledWith())',
    filepath: 'test/menu/decorators/lookup-address-test.js',
    line: 63
  }));
});

(0, _ava2.default)('should call own "post" on "call" when argument provided', function (t) {
  var _rec7 = new _powerAssertRecorder(),
      _rec8 = new _powerAssertRecorder(),
      _rec9 = new _powerAssertRecorder();

  var action = new _lookupAddress2.default(defaultParams, origin);
  action.post = _specSupport.ss.sinon.spy();
  action.call(31337);
  t.falsy(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(origin, 'arguments/0/callee/object/object').get, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.falsy(origin.get.calledWith())',
    filepath: 'test/menu/decorators/lookup-address-test.js',
    line: 70
  }));
  t.falsy(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(origin, 'arguments/0/callee/object/object').post, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.falsy(origin.post.calledWith())',
    filepath: 'test/menu/decorators/lookup-address-test.js',
    line: 71
  }));
  t.truthy(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(action, 'arguments/0/callee/object/object').post, 'arguments/0/callee/object').calledWith(31337), 'arguments/0'), {
    content: 't.truthy(action.post.calledWith(31337))',
    filepath: 'test/menu/decorators/lookup-address-test.js',
    line: 72
  }));
});

(0, _ava2.default)('should not call promise when address is not string', function (t) {
  var _rec10 = new _powerAssertRecorder();

  var action = new _lookupAddress2.default(defaultParams, origin);
  action.post = _specSupport.ss.sinon.spy();
  action.promise = _specSupport.ss.sinon.spy();
  action.call(31337);
  t.falsy(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(action, 'arguments/0/callee/object/object').promise, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.falsy(action.promise.calledWith())',
    filepath: 'test/menu/decorators/lookup-address-test.js',
    line: 80
  }));
});

(0, _ava2.default)('internally should use promise when address is string', function (t) {
  var _rec11 = new _powerAssertRecorder();

  var action = new _lookupAddress2.default(defaultParams, origin);
  action.promise = _specSupport.ss.sinon.stub().returns(true);
  action.call(address);
  t.truthy(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(action, 'arguments/0/callee/object/object').promise, 'arguments/0/callee/object').calledWith(_rec11._capt(address, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.truthy(action.promise.calledWith(address))',
    filepath: 'test/menu/decorators/lookup-address-test.js',
    line: 87
  }));
});

(0, _ava2.default)('should return promise response', function (t) {
  var _rec12 = new _powerAssertRecorder();

  var action = new _lookupAddress2.default(defaultParams, origin);
  action.promise = _specSupport.ss.sinon.stub().returns(true);
  var response = action.call(address);
  t.is(_rec12._expr(_rec12._capt(_rec12._capt(response, 'arguments/0/object').type, 'arguments/0'), {
    content: 't.is(response.type, \'promise\')',
    filepath: 'test/menu/decorators/lookup-address-test.js',
    line: 94
  }), 'promise');
});

_ava2.default.cb('should resolve promise with the same address when geocoder returns error', function (t) {
  t.plan(1);
  var getGeocoder = function getGeocoder() {
    return {
      geocode: function geocode(_address, cb) {
        cb(true);
      }
    };
  };
  var action = new _lookupAddress2.default(defaultParams, origin, settings, getGeocoder);
  action.promise(address).then(function (resolvedAddress) {
    var _rec13 = new _powerAssertRecorder(),
        _rec14 = new _powerAssertRecorder();

    t.is(_rec13._expr(_rec13._capt(resolvedAddress, 'arguments/0'), {
      content: 't.is(resolvedAddress, address)',
      filepath: 'test/menu/decorators/lookup-address-test.js',
      line: 106
    }), _rec14._expr(_rec14._capt(address, 'arguments/1'), {
      content: 't.is(resolvedAddress, address)',
      filepath: 'test/menu/decorators/lookup-address-test.js',
      line: 106
    }));
    t.end();
  });
});

_ava2.default.cb('should resolve promise with coordinates address when geocoder returns no error', function (t) {
  t.plan(1);
  var obj = [{ latitude: 1, longitude: 2 }];
  var getGeocoder = function getGeocoder() {
    return {
      geocode: function geocode(_address, cb) {
        cb(false, obj);
      }
    };
  };
  var action = new _lookupAddress2.default(defaultParams, origin, settings, getGeocoder);
  action.promise(address).then(function (resolvedAddress) {
    var _rec15 = new _powerAssertRecorder(),
        _rec16 = new _powerAssertRecorder();

    t.deepEqual(_rec15._expr(_rec15._capt(resolvedAddress, 'arguments/0'), {
      content: 't.deepEqual(resolvedAddress, [1, 2])',
      filepath: 'test/menu/decorators/lookup-address-test.js',
      line: 121
    }), _rec16._expr(_rec16._capt([1, 2], 'arguments/1'), {
      content: 't.deepEqual(resolvedAddress, [1, 2])',
      filepath: 'test/menu/decorators/lookup-address-test.js',
      line: 121
    }));
    t.end();
  });
});

_ava2.default.cb('should request geocoder with GEOCODING_API_KEY from settings', function (t) {
  t.plan(1);
  var getGeocoder = function getGeocoder(options) {
    var _rec17 = new _powerAssertRecorder();

    t.is(_rec17._expr(_rec17._capt(_rec17._capt(options, 'arguments/0/object').apiKey, 'arguments/0'), {
      content: 't.is(options.apiKey, 31337)',
      filepath: 'test/menu/decorators/lookup-address-test.js',
      line: 129
    }), 31337);
    t.end();
    return { geocode: function geocode() {} };
  };
  var action = new _lookupAddress2.default(defaultParams, origin, settings, getGeocoder);
  action.promise(address).then(function () {});
});

_ava2.default.cb('should not fail when geocoder returns no error, but empty array', function (t) {
  t.plan(1);
  var getGeocoder = function getGeocoder() {
    return {
      geocode: function geocode(_address, cb) {
        cb(false, []);
      }
    };
  };
  var action = new _lookupAddress2.default(defaultParams, origin, settings, getGeocoder);
  action.promise(address).then(function (resolvedAddress) {
    var _rec18 = new _powerAssertRecorder(),
        _rec19 = new _powerAssertRecorder();

    t.is(_rec18._expr(_rec18._capt(resolvedAddress, 'arguments/0'), {
      content: 't.is(resolvedAddress, address)',
      filepath: 'test/menu/decorators/lookup-address-test.js',
      line: 148
    }), _rec19._expr(_rec19._capt(address, 'arguments/1'), {
      content: 't.is(resolvedAddress, address)',
      filepath: 'test/menu/decorators/lookup-address-test.js',
      line: 148
    }));
    t.end();
  });
});
//# sourceMappingURL=../../../node_modules/.cache/ava/41575a2eda3f99b17e547ba88bb16cb0.js.map