{"version":3,"sources":["numeric-test.js"],"names":["n","t","is","type","truthy","call","falsy"],"mappings":";;weAAA;;;;;;;;;;;;;;;;;;AAkBA;;;AACA;;;;AACA;;;;;;AAEA,mBAAK,4CAAL,EAAmD,aAAK;AAAA;;AACtD,MAAMA,IAAI,sBAAY,GAAZ,CAAV;AACAC,IAAEC,EAAF,uBAAK,oCAAEC,IAAP;AAAA;AAAA;AAAA;AAAA,MAAa,SAAb;AACD,CAHD;;AAKA,mBAAK,+BAAL,EAAsC,aAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACzCF,IAAEG,MAAF,yBAAS,kCAAY,GAAZ,gCAAiBC,IAAjB,EAAT;AAAA;AAAA;AAAA;AAAA;AACAJ,IAAEG,MAAF,yBAAS,kCAAY,GAAZ,gCAAiBC,IAAjB,EAAT;AAAA;AAAA;AAAA;AAAA;AACAJ,IAAEG,MAAF,yBAAS,kCAAY,KAAZ,gCAAmBC,IAAnB,EAAT;AAAA;AAAA;AAAA;AAAA;AACAJ,IAAEG,MAAF,yBAAS,kCAAY,MAAZ,gCAAoBC,IAApB,EAAT;AAAA;AAAA;AAAA;AAAA;AACAJ,IAAEG,MAAF,yBAAS,kCAAY,MAAZ,gCAAoBC,IAApB,EAAT;AAAA;AAAA;AAAA;AAAA;AACAJ,IAAEG,MAAF,yBAAS,kCAAY,OAAZ,gCAAqBC,IAArB,EAAT;AAAA;AAAA;AAAA;AAAA;AACAJ,IAAEG,MAAF,yBAAS,kCAAY,SAAZ,gCAAuBC,IAAvB,EAAT;AAAA;AAAA;AAAA;AAAA;AACD,CARD;;AAUA,mBAAK,kCAAL,EAAyC,aAAK;AAAA;AAAA;AAAA;;AAC5CJ,IAAEK,KAAF,yBAAQ,kCAAY,KAAZ,gCAAmBD,IAAnB,EAAR;AAAA;AAAA;AAAA;AAAA;AACAJ,IAAEK,KAAF,2BAAQ,mEAAcD,IAAd,EAAR;AAAA;AAAA;AAAA;AAAA;AACAJ,IAAEK,KAAF,2BAAQ,mCAAY,GAAZ,gCAAiBD,IAAjB,EAAR;AAAA;AAAA;AAAA;AAAA;AACD,CAJD","file":"numeric-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new */\nimport test from 'ava';\nimport Numeric from '../../src/conditions/numeric';\n\ntest('can be constructed with default parameters', t => {\n  const n = new Numeric(123);\n  t.is(n.type, 'numeric');\n});\n\ntest('should be truthy when numeric', t => {\n  t.truthy(new Numeric(123).call());\n  t.truthy(new Numeric('0').call());\n  t.truthy(new Numeric('123').call());\n  t.truthy(new Numeric(' 123').call());\n  t.truthy(new Numeric('123 ').call());\n  t.truthy(new Numeric(' 123 ').call());\n  t.truthy(new Numeric('  123  ').call());\n});\n\ntest('should be falsy when not numeric', t => {\n  t.falsy(new Numeric('asd').call());\n  t.falsy(new Numeric().call());\n  t.falsy(new Numeric(' ').call());\n});\n"]}