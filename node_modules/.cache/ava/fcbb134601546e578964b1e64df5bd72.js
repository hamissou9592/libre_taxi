'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LibreTaxi, free and open source ride sharing platform.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Copyright (C) 2016-2017  Roman Pushkin
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            it under the terms of the GNU Affero General Public License as
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            published by the Free Software Foundation, either version 3 of the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            but WITHOUT ANY WARRANTY; without even the implied warranty of
or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GNU Affero General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            You should have received a copy of the GNU Affero General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        */

/* eslint-disable no-new */


var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _optionsMap = require('../../src/support/options-map');

var _optionsMap2 = _interopRequireDefault(_optionsMap);

var _optionsResponse = require('../../src/responses/options-response');

var _optionsResponse2 = _interopRequireDefault(_optionsResponse);

var _compositeResponse = require('../../src/responses/composite-response');

var _compositeResponse2 = _interopRequireDefault(_compositeResponse);

var _textResponse = require('../../src/responses/text-response');

var _textResponse2 = _interopRequireDefault(_textResponse);

var _ifResponse = require('../../src/responses/if-response');

var _ifResponse2 = _interopRequireDefault(_ifResponse);

var _checkNotNull = require('../helpers/check-not-null');

var _checkNotNull2 = _interopRequireDefault(_checkNotNull);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _checkNotNull2.default)('response', function (args) {
  new _optionsMap2.default(args);
});

(0, _ava2.default)('can be constructed with default parameters', function (t) {
  new _optionsMap2.default({ response: {} });
  t.pass();
});

(0, _ava2.default)('should parse simple options response', function (t) {
  var _rec = new _powerAssertRecorder(),
      _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder();

  var response = new _optionsResponse2.default({ rows: [[{ label: 'one', value: '1' }, { label: 'two', value: '2' }, { label: 'three', value: '3' }]] });
  var om = new _optionsMap2.default({ response: response });
  var map = om.parse();
  t.is(_rec._expr(_rec._capt(_rec._capt(_rec._capt(Object, 'arguments/0/object/callee/object').keys(_rec._capt(map, 'arguments/0/object/arguments/0')), 'arguments/0/object').length, 'arguments/0'), {
    content: 't.is(Object.keys(map).length, 3)',
    filepath: 'test/support/options-map-test.js',
    line: 46
  }), 3);
  t.is(_rec2._expr(_rec2._capt(_rec2._capt(map, 'arguments/0/object').one, 'arguments/0'), {
    content: 't.is(map.one, \'1\')',
    filepath: 'test/support/options-map-test.js',
    line: 47
  }), '1');
  t.is(_rec3._expr(_rec3._capt(_rec3._capt(map, 'arguments/0/object').two, 'arguments/0'), {
    content: 't.is(map.two, \'2\')',
    filepath: 'test/support/options-map-test.js',
    line: 48
  }), '2');
  t.is(_rec4._expr(_rec4._capt(_rec4._capt(map, 'arguments/0/object').three, 'arguments/0'), {
    content: 't.is(map.three, \'3\')',
    filepath: 'test/support/options-map-test.js',
    line: 49
  }), '3');
});

(0, _ava2.default)('should parse options response with multiple rows and columns', function (t) {
  var _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder(),
      _rec7 = new _powerAssertRecorder(),
      _rec8 = new _powerAssertRecorder();

  var response = new _optionsResponse2.default({ rows: [[{ label: 'one', value: '1' }], [{ label: 'two', value: '2' }, { label: 'three', value: '3' }]] });
  var om = new _optionsMap2.default({ response: response });
  var map = om.parse();
  t.is(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(Object, 'arguments/0/object/callee/object').keys(_rec5._capt(map, 'arguments/0/object/arguments/0')), 'arguments/0/object').length, 'arguments/0'), {
    content: 't.is(Object.keys(map).length, 3)',
    filepath: 'test/support/options-map-test.js',
    line: 65
  }), 3);
  t.is(_rec6._expr(_rec6._capt(_rec6._capt(map, 'arguments/0/object').one, 'arguments/0'), {
    content: 't.is(map.one, \'1\')',
    filepath: 'test/support/options-map-test.js',
    line: 66
  }), '1');
  t.is(_rec7._expr(_rec7._capt(_rec7._capt(map, 'arguments/0/object').two, 'arguments/0'), {
    content: 't.is(map.two, \'2\')',
    filepath: 'test/support/options-map-test.js',
    line: 67
  }), '2');
  t.is(_rec8._expr(_rec8._capt(_rec8._capt(map, 'arguments/0/object').three, 'arguments/0'), {
    content: 't.is(map.three, \'3\')',
    filepath: 'test/support/options-map-test.js',
    line: 68
  }), '3');
});

(0, _ava2.default)('should parse nested composite response with mixed responses', function (t) {
  var _rec9 = new _powerAssertRecorder(),
      _rec10 = new _powerAssertRecorder(),
      _rec11 = new _powerAssertRecorder(),
      _rec12 = new _powerAssertRecorder(),
      _rec13 = new _powerAssertRecorder();

  var response1 = new _optionsResponse2.default({ rows: [[{ label: 'one', value: '1' }, { label: 'two', value: '2' }]] });
  var response2 = new _textResponse2.default({ message: 'foo' });
  var response3 = new _optionsResponse2.default({ rows: [[{ label: 'three', value: '3' }, { label: 'four', value: '4' }]] });

  var cr1 = new _compositeResponse2.default().add(response1).add(response2);
  var cr2 = new _compositeResponse2.default().add(response3);
  var response = new _compositeResponse2.default().add(cr1).add(cr2);

  var om = new _optionsMap2.default({ response: response });
  var map = om.parse();
  t.is(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(Object, 'arguments/0/object/callee/object').keys(_rec9._capt(map, 'arguments/0/object/arguments/0')), 'arguments/0/object').length, 'arguments/0'), {
    content: 't.is(Object.keys(map).length, 4)',
    filepath: 'test/support/options-map-test.js',
    line: 99
  }), 4);
  t.is(_rec10._expr(_rec10._capt(_rec10._capt(map, 'arguments/0/object').one, 'arguments/0'), {
    content: 't.is(map.one, \'1\')',
    filepath: 'test/support/options-map-test.js',
    line: 100
  }), '1');
  t.is(_rec11._expr(_rec11._capt(_rec11._capt(map, 'arguments/0/object').two, 'arguments/0'), {
    content: 't.is(map.two, \'2\')',
    filepath: 'test/support/options-map-test.js',
    line: 101
  }), '2');
  t.is(_rec12._expr(_rec12._capt(_rec12._capt(map, 'arguments/0/object').three, 'arguments/0'), {
    content: 't.is(map.three, \'3\')',
    filepath: 'test/support/options-map-test.js',
    line: 102
  }), '3');
  t.is(_rec13._expr(_rec13._capt(_rec13._capt(map, 'arguments/0/object').four, 'arguments/0'), {
    content: 't.is(map.four, \'4\')',
    filepath: 'test/support/options-map-test.js',
    line: 103
  }), '4');
});

(0, _ava2.default)('should support if response', function (t) {
  var _rec14 = new _powerAssertRecorder(),
      _rec15 = new _powerAssertRecorder(),
      _rec16 = new _powerAssertRecorder(),
      _rec17 = new _powerAssertRecorder(),
      _rec18 = new _powerAssertRecorder();

  var response1 = new _optionsResponse2.default({ rows: [[{ label: 'one', value: '1' }, { label: 'two', value: '2' }]] });
  var response2 = new _optionsResponse2.default({ rows: [[{ label: 'three', value: '3' }, { label: 'four', value: '4' }]] });
  var response = new _ifResponse2.default({
    condition: {},
    ok: response1,
    err: response2
  });

  var om = new _optionsMap2.default({ response: response });
  var map = om.parse();
  t.is(_rec14._expr(_rec14._capt(_rec14._capt(_rec14._capt(Object, 'arguments/0/object/callee/object').keys(_rec14._capt(map, 'arguments/0/object/arguments/0')), 'arguments/0/object').length, 'arguments/0'), {
    content: 't.is(Object.keys(map).length, 4)',
    filepath: 'test/support/options-map-test.js',
    line: 129
  }), 4);
  t.is(_rec15._expr(_rec15._capt(_rec15._capt(map, 'arguments/0/object').one, 'arguments/0'), {
    content: 't.is(map.one, \'1\')',
    filepath: 'test/support/options-map-test.js',
    line: 130
  }), '1');
  t.is(_rec16._expr(_rec16._capt(_rec16._capt(map, 'arguments/0/object').two, 'arguments/0'), {
    content: 't.is(map.two, \'2\')',
    filepath: 'test/support/options-map-test.js',
    line: 131
  }), '2');
  t.is(_rec17._expr(_rec17._capt(_rec17._capt(map, 'arguments/0/object').three, 'arguments/0'), {
    content: 't.is(map.three, \'3\')',
    filepath: 'test/support/options-map-test.js',
    line: 132
  }), '3');
  t.is(_rec18._expr(_rec18._capt(_rec18._capt(map, 'arguments/0/object').four, 'arguments/0'), {
    content: 't.is(map.four, \'4\')',
    filepath: 'test/support/options-map-test.js',
    line: 133
  }), '4');
});
//# sourceMappingURL=../../node_modules/.cache/ava/fcbb134601546e578964b1e64df5bd72.js.map