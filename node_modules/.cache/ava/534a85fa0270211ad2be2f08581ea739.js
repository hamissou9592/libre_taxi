'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LibreTaxi, free and open source ride sharing platform.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Copyright (C) 2016-2017  Roman Pushkin
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            it under the terms of the GNU Affero General Public License as
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            published by the Free Software Foundation, either version 3 of the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            but WITHOUT ANY WARRANTY; without even the implied warranty of
or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GNU Affero General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            You should have received a copy of the GNU Affero General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        */

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _callActionResponseHandler = require('../../src/response-handlers/call-action-response-handler');

var _callActionResponseHandler2 = _interopRequireDefault(_callActionResponseHandler);

var _userFactory = require('../../src/factories/user-factory');

var _callActionResponse = require('../../src/responses/call-action-response');

var _callActionResponse2 = _interopRequireDefault(_callActionResponse);

var _specSupport = require('../spec-support');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('can be constructed with default parameters', function (t) {
  var _rec = new _powerAssertRecorder();

  var h = new _callActionResponseHandler2.default({ response: {} });
  t.is(_rec._expr(_rec._capt(_rec._capt(h, 'arguments/0/object').type, 'arguments/0'), {
    content: 't.is(h.type, \'call-action-response-handler\')',
    filepath: 'test/response-handlers/call-action-response-handler-test.js',
    line: 27
  }), 'call-action-response-handler');
});

_ava2.default.cb('should create message and post to the queue when kicker not specified', function (t) {
  var queue = {
    create: function create(obj) {
      var _rec2 = new _powerAssertRecorder(),
          _rec3 = new _powerAssertRecorder(),
          _rec4 = new _powerAssertRecorder(),
          _rec5 = new _powerAssertRecorder();

      t.is(_rec2._expr(_rec2._capt(_rec2._capt(obj, 'arguments/0/object').userKey, 'arguments/0'), {
        content: 't.is(obj.userKey, \'cli_1\')',
        filepath: 'test/response-handlers/call-action-response-handler-test.js',
        line: 33
      }), 'cli_1');
      t.deepEqual(_rec3._expr(_rec3._capt(_rec3._capt(obj, 'arguments/0/object').arg, 'arguments/0'), {
        content: 't.deepEqual(obj.arg, { foo: \'bar\' })',
        filepath: 'test/response-handlers/call-action-response-handler-test.js',
        line: 34
      }), _rec4._expr(_rec4._capt({ foo: 'bar' }, 'arguments/1'), {
        content: 't.deepEqual(obj.arg, { foo: \'bar\' })',
        filepath: 'test/response-handlers/call-action-response-handler-test.js',
        line: 34
      }));
      t.is(_rec5._expr(_rec5._capt(_rec5._capt(obj, 'arguments/0/object').route, 'arguments/0'), {
        content: 't.is(obj.route, \'default\')',
        filepath: 'test/response-handlers/call-action-response-handler-test.js',
        line: 35
      }), 'default');
    }
  };

  var response = new _callActionResponse2.default({
    userKey: 'cli_1',
    route: 'default',
    arg: { foo: 'bar' }
  });

  var h = new _callActionResponseHandler2.default({ response: response, queue: queue });

  var then = function then(f) {
    var _rec6 = new _powerAssertRecorder();

    t.truthy(_rec6._expr(_rec6._capt(f, 'arguments/0'), {
      content: 't.truthy(f)',
      filepath: 'test/response-handlers/call-action-response-handler-test.js',
      line: 48
    }));
    var user = { state: { menuLocation: 'foobar' } };
    f(user);
  };

  (0, _userFactory.mockLoadUser)(function () {
    return { then: then };
  }); // eslint-disable-line arrow-body-style

  h.call(function () {
    t.end();
  });
});

_ava2.default.cb('should not enqueue when kicker is not satisfied', function (t) {
  var queue = { create: function create() {
      t.fail('should not enqueue');
    } };

  var response = new _callActionResponse2.default({
    userKey: 'cli_1',
    route: 'default',
    arg: { foo: 'bar' },
    kicker: { menuLocation: 'something_different' }
  });

  var h = new _callActionResponseHandler2.default({ response: response, queue: queue });

  var then = function then(f) {
    var _rec7 = new _powerAssertRecorder();

    t.truthy(_rec7._expr(_rec7._capt(f, 'arguments/0'), {
      content: 't.truthy(f)',
      filepath: 'test/response-handlers/call-action-response-handler-test.js',
      line: 71
    }));
    var user = { state: { menuLocation: 'foobar' } };
    f(user);
  };

  (0, _userFactory.mockLoadUser)(function () {
    return { then: then };
  }); // eslint-disable-line arrow-body-style

  h.call(function () {
    t.end();
  });
});

_ava2.default.cb('should enqueue with correct kicker', function (t) {
  var queue = { create: function create() {
      t.end();
    } };

  var response = new _callActionResponse2.default({
    userKey: 'cli_1',
    route: 'default',
    arg: { foo: 'bar' },
    kicker: { menuLocation: 'foobar' }
  });

  var h = new _callActionResponseHandler2.default({ response: response, queue: queue });

  var then = function then(f) {
    var _rec8 = new _powerAssertRecorder();

    t.truthy(_rec8._expr(_rec8._capt(f, 'arguments/0'), {
      content: 't.truthy(f)',
      filepath: 'test/response-handlers/call-action-response-handler-test.js',
      line: 94
    }));
    var user = { state: { menuLocation: 'foobar' } };
    f(user);
  };

  (0, _userFactory.mockLoadUser)(function () {
    return { then: then };
  }); // eslint-disable-line arrow-body-style

  h.call(function () {});
});

_ava2.default.cb('should enqueue with delay', function (t) {
  t.plan(6);

  var queue = {
    createDelayed: function createDelayed(obj, delay) {
      var _rec9 = new _powerAssertRecorder(),
          _rec10 = new _powerAssertRecorder(),
          _rec11 = new _powerAssertRecorder(),
          _rec12 = new _powerAssertRecorder(),
          _rec13 = new _powerAssertRecorder();

      t.is(_rec9._expr(_rec9._capt(_rec9._capt(obj, 'arguments/0/object').userKey, 'arguments/0'), {
        content: 't.is(obj.userKey, \'cli_1\')',
        filepath: 'test/response-handlers/call-action-response-handler-test.js',
        line: 109
      }), 'cli_1');
      t.deepEqual(_rec10._expr(_rec10._capt(_rec10._capt(obj, 'arguments/0/object').arg, 'arguments/0'), {
        content: 't.deepEqual(obj.arg, { foo: \'bar\' })',
        filepath: 'test/response-handlers/call-action-response-handler-test.js',
        line: 110
      }), _rec11._expr(_rec11._capt({ foo: 'bar' }, 'arguments/1'), {
        content: 't.deepEqual(obj.arg, { foo: \'bar\' })',
        filepath: 'test/response-handlers/call-action-response-handler-test.js',
        line: 110
      }));
      t.is(_rec12._expr(_rec12._capt(_rec12._capt(obj, 'arguments/0/object').route, 'arguments/0'), {
        content: 't.is(obj.route, \'default\')',
        filepath: 'test/response-handlers/call-action-response-handler-test.js',
        line: 111
      }), 'default');
      t.is(_rec13._expr(_rec13._capt(delay, 'arguments/0'), {
        content: 't.is(delay, 3000)',
        filepath: 'test/response-handlers/call-action-response-handler-test.js',
        line: 112
      }), 3000);
    },
    create: _specSupport.ss.sinon.spy()
  };

  var response = new _callActionResponse2.default({
    userKey: 'cli_1',
    route: 'default',
    arg: { foo: 'bar' },
    delay: 3000
  });

  var h = new _callActionResponseHandler2.default({ response: response, queue: queue });

  var then = function then(f) {
    var _rec14 = new _powerAssertRecorder();

    t.truthy(_rec14._expr(_rec14._capt(f, 'arguments/0'), {
      content: 't.truthy(f)',
      filepath: 'test/response-handlers/call-action-response-handler-test.js',
      line: 127
    }));
    var user = { state: { menuLocation: 'foobar' } };
    f(user);
  };

  (0, _userFactory.mockLoadUser)(function () {
    return { then: then };
  }); // eslint-disable-line arrow-body-style

  h.call(function () {
    var _rec15 = new _powerAssertRecorder();

    t.is(_rec15._expr(_rec15._capt(_rec15._capt(_rec15._capt(queue, 'arguments/0/object/object').create, 'arguments/0/object').called, 'arguments/0'), {
      content: 't.is(queue.create.called, false)',
      filepath: 'test/response-handlers/call-action-response-handler-test.js',
      line: 135
    }), false);
    t.end();
  });
});
//# sourceMappingURL=../../node_modules/.cache/ava/534a85fa0270211ad2be2f08581ea739.js.map