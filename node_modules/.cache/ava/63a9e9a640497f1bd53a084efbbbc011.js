'use strict';

var _keys = require('/home/hamissou/Bureau/libretaxi-master/node_modules/babel-runtime/core-js/object/keys.js');

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = require('/home/hamissou/Bureau/libretaxi-master/node_modules/babel-runtime/core-js/get-iterator.js');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _walk = require('walk');

var _walk2 = _interopRequireDefault(_walk);

var _oboe = require('oboe');

var _oboe2 = _interopRequireDefault(_oboe);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
    LibreTaxi, free and open source ride sharing platform.
    Copyright (C) 2016-2017  Roman Pushkin

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

var NUM_OF_LOCALIZATIONS = 22;

_ava2.default.cb('locales should have all keys from en.json, except *_desc', function (t) {
  t.plan(NUM_OF_LOCALIZATIONS - 1);

  var walker = _walk2.default.walk('../locales', { followLinks: false });
  var en = require('../locales/en.json'); // eslint-disable-line global-require

  // walk through each file, except en.json
  walker.on('file', function (root, stat, next) {
    if (stat.name !== 'en.json') {
      var path = root + '/' + stat.name;
      var xx = require(path); // eslint-disable-line global-require

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)((0, _keys2.default)(xx)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var key = _step.value;

          if (xx[key].length === 0) t.fail('Value length for key \'' + key + '\' in ' + stat.name + ' is 0');
          if (!en[key]) t.fail('Key \'' + key + '\' from \'' + stat.name + '\' was not found in en.json');
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = (0, _getIterator3.default)((0, _keys2.default)(en)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _key = _step2.value;

          if (_key.endsWith('_desc')) continue;
          if (!xx[_key]) t.fail('Key \'' + _key + '\' exists in en.json, but not in ' + stat.name);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      t.pass();
    }

    next();
  });

  walker.on('end', function () {
    t.end();
  });
});

(0, _ava2.default)('en.json should have corresponding *_desc keys', function (t) {
  var en = require('../locales/en.json'); // eslint-disable-line global-require

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = (0, _getIterator3.default)((0, _keys2.default)(en)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var key = _step3.value;

      if (key.endsWith('_desc')) continue;
      if (key.startsWith('__') && key.endsWith('__')) continue; // skip __it__

      if (!en[key + '_desc']) t.fail('en.json has \'' + key + '\', but should also have \'' + key + '_desc\'');
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  t.pass();
});

_ava2.default.cb('locales except en.json should not have keys ending with _desc', function (t) {
  t.plan(NUM_OF_LOCALIZATIONS - 1);

  var walker = _walk2.default.walk('../locales', { followLinks: false });

  // walk through each file, except en.json
  walker.on('file', function (root, stat, next) {
    if (stat.name !== 'en.json') {
      var path = root + '/' + stat.name;
      var xx = require(path); // eslint-disable-line global-require

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = (0, _getIterator3.default)((0, _keys2.default)(xx)), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var key = _step4.value;

          if (key.endsWith('_desc')) {
            t.fail('\'' + stat.name + '\' cannot contani keys ending with \'_desc\', but \'' + key + '\' was found.');
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      t.pass();
    }

    next();
  });

  walker.on('end', function () {
    t.end();
  });
});

_ava2.default.cb('locales should not have duplicates in them', function (t) {
  t.plan(NUM_OF_LOCALIZATIONS);

  var tmp = {};
  var walker = _walk2.default.walk('../locales', { followLinks: false });

  // walk through each file, except en.json
  walker.on('file', function (root, stat, next) {
    var path = root + '/' + stat.name;

    (0, _oboe2.default)(_fs2.default.createReadStream(path)).node('*', function (v, k) {
      if (!tmp[k]) {
        tmp[k] = 1;
      } else {
        t.fail('Duplicate key \'' + k + '\' found in ' + stat.name);
      }
    }).done(function (tree) {
      tmp = {};
      if ((0, _keys2.default)(tree).length > 0) {
        t.pass();
      } else {
        t.fail();
      }
      next();
    });
  });

  walker.on('end', function () {
    t.end();
  });
});

_ava2.default.cb('locales should not have long keys with {{phone}}', function (t) {
  // The reason for that is how Telegram handles big messages. If the message
  // is more than 200 characters, phone number is not highlighted.
  // See details here: https://github.com/ro31337/libretaxi/issues/366

  t.plan(NUM_OF_LOCALIZATIONS);
  var walker = _walk2.default.walk('../locales', { followLinks: false });

  // walk through each file, except en.json
  walker.on('file', function (root, stat, next) {
    var path = root + '/' + stat.name;

    (0, _oboe2.default)(_fs2.default.createReadStream(path)).node('*', function (v, k) {
      if (typeof v === 'string' && v.includes('{{phone}}') && v.length > 150) {
        t.fail('[' + stat.name + '] "' + k + '" value length is ' + v.length + ', max recommended is 150');
      }
    }).done(function (tree) {
      if ((0, _keys2.default)(tree).length > 0) {
        t.pass();
      } else {
        t.fail();
      }
      next();
    });
  });

  walker.on('end', function () {
    t.end();
  });
});
//# sourceMappingURL=../node_modules/.cache/ava/63a9e9a640497f1bd53a084efbbbc011.js.map