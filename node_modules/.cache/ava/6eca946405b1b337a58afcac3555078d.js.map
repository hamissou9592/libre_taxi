{"version":3,"sources":["check-platform-type-test.js"],"names":["Foo","with","cb","err","t","throws","platformType","end","pass"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAmBA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;EArBA;;;;;;;;;;;;;;;;;;AAkBA;;;IAKMA,G;;;;;;;;;EAAY;AAAA;AAAA;AAAA;;AAAA;AAAA,KAAcC,IAAd,6B;;AAElB,cAAKC,EAAL,CAAQ,kEAAR,EAA4E,aAAK;AAC/E,MAAMC,MAAM,qCAAZ;AACAC,IAAEC,MAAF;AAAA,WAAS,YAAM;AAAE,UAAIL,GAAJ,CAAQ,EAAEM,cAAc,KAAhB,EAAR;AAAmC,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAsDH,GAAtD;AACAC,IAAEG,GAAF;AACD,CAJD;;AAMA,cAAKL,EAAL,CAAQ,kDAAR,EAA4D,aAAK;AAC/D,MAAMC,MAAM,0CAAZ;AACAC,IAAEC,MAAF;AAAA,WAAS,YAAM;AAAE,UAAIL,GAAJ,CAAQ,EAAEM,cAAc,EAAhB,EAAR;AAAgC,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmDH,GAAnD;AACAC,IAAEC,MAAF;AAAA,WAAS,YAAM;AAAE,UAAIL,GAAJ;AAAY,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA+BG,GAA/B;AACAC,IAAEC,MAAF;AAAA,WAAS,YAAM;AAAE,UAAIL,GAAJ,CAAQ,EAAR;AAAc,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiCG,GAAjC;AACAC,IAAEG,GAAF;AACD,CAND;;AAQA,mBAAK,iCAAL,EAAwC,aAAK;AAC3C,MAAIP,GAAJ,CAAQ,EAAEM,cAAc,KAAhB,EAAR;AACAF,IAAEI,IAAF;AACD,CAHD","file":"check-platform-type-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new */\nimport test from 'ava';\nimport checkPlatformType from '../../src/validations/check-platform-type';\nimport { mix } from 'mixwith';\n\nclass Foo extends mix(class {}).with(checkPlatformType) {}\n\ntest.cb('should throw error when \\'platformType\\' parameter not supported', t => {\n  const err = 'platform type \\'bar\\' not supported';\n  t.throws(() => { new Foo({ platformType: 'bar' }); }, err);\n  t.end();\n});\n\ntest.cb('should not support empty or unspecified platform', t => {\n  const err = '\\'platformType\\' parameter not specified';\n  t.throws(() => { new Foo({ platformType: '' }); }, err);\n  t.throws(() => { new Foo(); }, err);\n  t.throws(() => { new Foo({}); }, err);\n  t.end();\n});\n\ntest('should support \\'cli\\' platform', t => {\n  new Foo({ platformType: 'cli' });\n  t.pass();\n});\n"]}