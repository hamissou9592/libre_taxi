{"version":3,"sources":["notify-driver-test.js"],"names":["t","pass","loadUser","user","then","f","shouldFail","failReason","order","plan","isNotified","successCallback","fail","failCallback","reason","is","end","subject","call","cb","state","status","createdAt","Date","getTime","userType","muted","vehicleType","requestedVehicleType","menuLocation","radius","saveSpy","sinon","spy","markNotifiedSpy","queue","create","truthy","calledWith","userKey","arg","orderKey","distance","from","to","price","passengerKey","route","passengerLocation","passengerDestination","save","markNotified"],"mappings":"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","file":"notify-driver-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new, max-len, arrow-body-style, no-param-reassign */\nimport test from 'ava';\nimport NotifyDriver from '../../../src/response-handlers/support/notify-driver';\nimport { ss } from '../../spec-support';\n\ntest('can be constructed with default parameters', t => {\n  new NotifyDriver();\n  t.pass();\n});\n\nconst loadUser = (user) => {\n  const then = (f) => {\n    f(user);\n  };\n  return () => { return { then }; };\n};\n\nconst shouldFail = (t, failReason, user, order) => {\n  t.plan(1);\n  if (!order.isNotified) order.isNotified = () => { return false; };\n  const successCallback = () => { t.fail(); };\n  const failCallback = (reason) => { t.is(reason, failReason); t.end(); };\n  const subject = new NotifyDriver({ successCallback, failCallback, loadUser: loadUser(user) });\n  subject.call('cli_1', 1, order);\n};\n\ntest.cb('should not notify driver when order is not new', t => {\n  shouldFail(t, 'order is not new', {}, { state: { status: 'old' } });\n});\n\ntest.cb('should not notify driver when order is stale', t => {\n  shouldFail(\n    t,\n    'order is stale',\n    {},\n    { state: { status: 'new', createdAt: (new Date).getTime() - 15 * 60 * 1000 - 1 } }\n  );\n});\n\ntest.cb('should not notify driver when driver was notified already', t => {\n  const isNotified = () => { return true; };\n  shouldFail(\n    t,\n    'driver was already notified',\n    {},\n    { state: { status: 'new', createdAt: (new Date).getTime() }, isNotified }\n  );\n});\n\ntest.cb('should not notify driver when userType is not \\'driver\\'', t => {\n  shouldFail(\n    t,\n    'userType is not \\'driver\\'',\n    { state: { userType: 'passenger' } },\n    { state: { status: 'new', createdAt: (new Date).getTime() } },\n  );\n});\n\ntest.cb('should not notify driver when driver is muted', t => {\n  shouldFail(\n    t,\n    'driver is muted',\n    { state: { userType: 'driver', muted: true } },\n    { state: { status: 'new', createdAt: (new Date).getTime() } },\n  );\n});\n\ntest.cb('should not notify driver when vehicle types don\\'t match', t => {\n  shouldFail(\n    t,\n    'vehicle types don\\'t match',\n    { state: { userType: 'driver', vehicleType: 'motorbike' } },\n    { state: { status: 'new', requestedVehicleType: 'car', createdAt: (new Date).getTime() } },\n  );\n});\n\ntest.cb('should not notify driver when driver is busy', t => {\n  shouldFail(\n    t,\n    'driver is busy',\n    { state: { userType: 'driver', vehicleType: 'car', menuLocation: 'settings' } },\n    { state: { status: 'new', requestedVehicleType: 'car', createdAt: (new Date).getTime() } },\n  );\n});\n\ntest.cb('should not notify driver when radius is less than distance to passenger', t => {\n  shouldFail(\n    t,\n    'distance 1 is greater than driver\\'s preferred radius 0.5',\n    {\n      state: {\n        userType: 'driver',\n        vehicleType: 'car',\n        menuLocation: 'driver-index',\n        radius: 0.5,\n      },\n    },\n    { state: { status: 'new', requestedVehicleType: 'car', createdAt: (new Date).getTime() } },\n  );\n});\n\ntest.cb('should notify driver when matched', t => {\n  t.plan(3);\n  const saveSpy = ss.sinon.spy();\n  const markNotifiedSpy = ss.sinon.spy();\n  const queue = { create: ss.sinon.spy() };\n  const successCallback = () => {\n    t.truthy(queue.create.calledWith({\n      userKey: 'cli_1',\n      arg: {\n        orderKey: 123,\n        distance: 1,\n        from: [1, 2],\n        to: 'foobar',\n        price: 50,\n        passengerKey: 'cli_123',\n      },\n      route: 'driver-order-new',\n    }));\n    t.truthy(saveSpy.calledWith());\n    t.truthy(markNotifiedSpy.calledWith('cli_1'));\n    t.end();\n  };\n  const failCallback = () => { t.fail(); };\n  const order = {\n    orderKey: 123,\n    state: {\n      status: 'new',\n      requestedVehicleType: 'car',\n      passengerLocation: [1, 2],\n      passengerDestination: 'foobar',\n      price: 50,\n      passengerKey: 'cli_123',\n      createdAt: (new Date).getTime(),\n    },\n    save: saveSpy,\n    isNotified: () => { return false; },\n    markNotified: markNotifiedSpy,\n  };\n  const user = {\n    state: {\n      radius: 1,\n      userType: 'driver',\n      vehicleType: 'car',\n      menuLocation: 'driver-index',\n    },\n  };\n  const subject = new NotifyDriver({\n    successCallback,\n    failCallback,\n    loadUser: loadUser(user),\n    queue,\n  });\n  subject.call('cli_1', 1, order);\n});\n"]}