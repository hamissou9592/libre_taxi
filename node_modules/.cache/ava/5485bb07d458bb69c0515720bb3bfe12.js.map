{"version":3,"sources":["all-test.js"],"names":["c","t","is","type","call","one","sinon","stub","returns","calledWith","two"],"mappings":"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","file":"all-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new */\nimport test from 'ava';\nimport All from '../../src/conditions/all';\nimport { ss } from '../spec-support';\n\ntest('can be constructed with default parameters', t => {\n  const c = new All(1, 2, 3);\n  t.is(c.type, 'all');\n});\n\ntest('should be callable and truthy if no params provided', t => {\n  const c = new All();\n  t.is(c.call(), true);\n});\n\ntest('should work for one condition when condition returns true', t => {\n  const one = {\n    call: ss.sinon.stub().returns(true),\n  };\n  const c = new All(\n    one\n  );\n  t.is(c.call(), true);\n  t.is(one.call.calledWith(), true);\n});\n\ntest('should work for one condition when condition returns false', t => {\n  const one = {\n    call: ss.sinon.stub().returns(false),\n  };\n  const c = new All(\n    one\n  );\n  t.is(c.call(), false);\n  t.is(one.call.calledWith(), true);\n});\n\ntest('should return true when multiple conditions return true', t => {\n  const one = {\n    call: ss.sinon.stub().returns(true),\n  };\n  const two = {\n    call: ss.sinon.stub().returns(true),\n  };\n  const c = new All(\n    one,\n    two,\n  );\n  t.is(c.call(), true);\n  t.is(one.call.calledWith(), true);\n  t.is(two.call.calledWith(), true);\n});\n\ntest('should return false when one of conditions returns false', t => {\n  const one = {\n    call: ss.sinon.stub().returns(true),\n  };\n  const two = {\n    call: ss.sinon.stub().returns(false),\n  };\n  const c = new All(\n    one,\n    two,\n  );\n  t.is(c.call(), false);\n  t.is(one.call.calledWith(), true);\n  t.is(two.call.calledWith(), true);\n});\n"]}