{"version":3,"sources":["lookup-address-test.js"],"names":["defaultParams","type","i18n","user","address","settings","GEOCODING_API_KEY","origin","beforeEach","get","sinon","spy","post","t","gt","action","pass","truthy","calledWith","falsy","call","promise","stub","returns","response","is","cb","plan","getGeocoder","geocode","_address","then","resolvedAddress","end","obj","latitude","longitude","deepEqual","options","apiKey"],"mappings":"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","file":"lookup-address-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new, no-unused-vars */\nimport test from 'ava';\nimport routes from '../../../src/routes'; // to aviod circular dependencies\nimport LookupAddress from '../../../src/actions/decorators/lookup-address';\nimport { ss } from '../../spec-support';\n\nconst defaultParams = { type: 'foo', i18n: {}, user: {} };\nconst address = '702 marshal street, redwood city';\nconst settings = { GEOCODING_API_KEY: 31337 };\n\nlet origin;\ntest.beforeEach(() => {\n  origin = {\n    get: ss.sinon.spy(),\n    post: ss.sinon.spy(),\n    t: ss.sinon.spy(),\n    gt: ss.sinon.spy(),\n  };\n});\n\ntest('can be constructed with default parameters', t => {\n  const action = new LookupAddress(defaultParams, origin);\n  t.pass();\n});\n\ntest('should just call origin on get', t => {\n  const action = new LookupAddress(defaultParams, origin);\n  action.get();\n  t.truthy(origin.get.calledWith());\n  t.falsy(origin.post.calledWith());\n});\n\ntest('should just call origin on t, gt with parameters', t => {\n  const action = new LookupAddress(defaultParams, origin);\n  action.t(1, 2, 3);\n  action.gt(11, 22, 33);\n  t.truthy(origin.t.calledWith(1, 2, 3));\n  t.truthy(origin.gt.calledWith(11, 22, 33));\n});\n\ntest('should call \"get\" on \"call\" when no argument provided', t => {\n  const action = new LookupAddress(defaultParams, origin);\n  action.call();\n  t.truthy(origin.get.calledWith());\n  t.falsy(origin.post.calledWith());\n});\n\ntest('should call own \"post\" on \"call\" when argument provided', t => {\n  const action = new LookupAddress(defaultParams, origin);\n  action.post = ss.sinon.spy();\n  action.call(31337);\n  t.falsy(origin.get.calledWith());\n  t.falsy(origin.post.calledWith());\n  t.truthy(action.post.calledWith(31337));\n});\n\ntest('should not call promise when address is not string', t => {\n  const action = new LookupAddress(defaultParams, origin);\n  action.post = ss.sinon.spy();\n  action.promise = ss.sinon.spy();\n  action.call(31337);\n  t.falsy(action.promise.calledWith());\n});\n\ntest('internally should use promise when address is string', t => {\n  const action = new LookupAddress(defaultParams, origin);\n  action.promise = ss.sinon.stub().returns(true);\n  action.call(address);\n  t.truthy(action.promise.calledWith(address));\n});\n\ntest('should return promise response', t => {\n  const action = new LookupAddress(defaultParams, origin);\n  action.promise = ss.sinon.stub().returns(true);\n  const response = action.call(address);\n  t.is(response.type, 'promise');\n});\n\ntest.cb('should resolve promise with the same address when geocoder returns error', t => {\n  t.plan(1);\n  const getGeocoder = () => ({\n    geocode: (_address, cb) => { cb(true); },\n  });\n  const action = new LookupAddress(defaultParams, origin, settings, getGeocoder);\n  action\n    .promise(address)\n    .then((resolvedAddress) => {\n      t.is(resolvedAddress, address);\n      t.end();\n    });\n});\n\ntest.cb('should resolve promise with coordinates address when geocoder returns no error', t => {\n  t.plan(1);\n  const obj = [{ latitude: 1, longitude: 2 }];\n  const getGeocoder = () => ({\n    geocode: (_address, cb) => { cb(false, obj); },\n  });\n  const action = new LookupAddress(defaultParams, origin, settings, getGeocoder);\n  action\n    .promise(address)\n    .then((resolvedAddress) => {\n      t.deepEqual(resolvedAddress, [1, 2]);\n      t.end();\n    });\n});\n\ntest.cb('should request geocoder with GEOCODING_API_KEY from settings', t => {\n  t.plan(1);\n  const getGeocoder = (options) => {\n    t.is(options.apiKey, 31337);\n    t.end();\n    return { geocode: () => {} };\n  };\n  const action = new LookupAddress(defaultParams, origin, settings, getGeocoder);\n  action\n    .promise(address)\n    .then(() => {});\n});\n\ntest.cb('should not fail when geocoder returns no error, but empty array', t => {\n  t.plan(1);\n  const getGeocoder = () => ({\n    geocode: (_address, cb) => { cb(false, []); },\n  });\n  const action = new LookupAddress(defaultParams, origin, settings, getGeocoder);\n  action\n    .promise(address)\n    .then((resolvedAddress) => {\n      t.is(resolvedAddress, address);\n      t.end();\n    });\n});\n"]}