'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LibreTaxi, free and open source ride sharing platform.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Copyright (C) 2016-2017  Roman Pushkin
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            it under the terms of the GNU Affero General Public License as
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            published by the Free Software Foundation, either version 3 of the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            but WITHOUT ANY WARRANTY; without even the implied warranty of
or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GNU Affero General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            You should have received a copy of the GNU Affero General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        */

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _firebaseServer = require('firebase-server');

var _firebaseServer2 = _interopRequireDefault(_firebaseServer);

var _statefulDemo = require('./stateful-demo');

var _statefulDemo2 = _interopRequireDefault(_statefulDemo);

var _firebaseDb = require('../src/firebase-db');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _firebaseDb.overrideSettings)({
  STATEFUL_CONNSTR: 'ws://localhost.firebaseio.test:5000',
  STATEFUL_CREDENTIALS_FILE: undefined
});

var server = null;

_ava2.default.before(function () {
  server = new _firebaseServer2.default(5000, 'localhost.firebaseio.test', {
    demo: {
      test_state_key: { foo: 1, bar: 2 },
      another_key: { foo: 11, bar: 22 }
    }
  });
});

_ava2.default.after.always('guaranteed cleanup', function () {
  server.close();
});

_ava2.default.cb('should load initial state from storage', function (t) {
  t.plan(4);

  var checkAnother = function checkAnother() {
    new _statefulDemo2.default('another_key').load().then(function (demo) {
      var _rec = new _powerAssertRecorder(),
          _rec2 = new _powerAssertRecorder();

      var state = demo.state;
      t.is(_rec._expr(_rec._capt(_rec._capt(state, 'arguments/0/object').foo, 'arguments/0'), {
        content: 't.is(state.foo, 11)',
        filepath: 'test/stateful-test.js',
        line: 50
      }), 11);
      t.is(_rec2._expr(_rec2._capt(_rec2._capt(state, 'arguments/0/object').bar, 'arguments/0'), {
        content: 't.is(state.bar, 22)',
        filepath: 'test/stateful-test.js',
        line: 51
      }), 22);
      t.end();
    }).catch(function (err) {
      t.fail('ERR2: ' + err);
    });
  };

  new _statefulDemo2.default('test_state_key').load().then(function (demo) {
    var _rec3 = new _powerAssertRecorder(),
        _rec4 = new _powerAssertRecorder();

    var state = demo.state;
    t.is(_rec3._expr(_rec3._capt(_rec3._capt(state, 'arguments/0/object').foo, 'arguments/0'), {
      content: 't.is(state.foo, 1)',
      filepath: 'test/stateful-test.js',
      line: 61
    }), 1);
    t.is(_rec4._expr(_rec4._capt(_rec4._capt(state, 'arguments/0/object').bar, 'arguments/0'), {
      content: 't.is(state.bar, 2)',
      filepath: 'test/stateful-test.js',
      line: 62
    }), 2);
    checkAnother();
  }).catch(function (err) {
    t.fail('ERR1: ' + err);
  });
});

_ava2.default.cb('should have state if key not exists', function (t) {
  t.plan(1);
  new _statefulDemo2.default('non_existing_key').load().then(function (demo) {
    var _rec5 = new _powerAssertRecorder();

    t.truthy(_rec5._expr(_rec5._capt(_rec5._capt(demo, 'arguments/0/object').state, 'arguments/0'), {
      content: 't.truthy(demo.state)',
      filepath: 'test/stateful-test.js',
      line: 73
    }));
    t.end();
  }).catch(function (err) {
    t.fail('ERR3: ' + err);
  });
});

_ava2.default.cb('should save state and execute callback', function (t) {
  t.plan(1);

  // to be executed on save ("line A" below)
  var callback = function callback() {
    new _statefulDemo2.default('test_state_key').load().then(function (demo) {
      var _rec6 = new _powerAssertRecorder();

      t.is(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(demo, 'arguments/0/object/object').state, 'arguments/0/object').x, 'arguments/0'), {
        content: 't.is(demo.state.x, 3)',
        filepath: 'test/stateful-test.js',
        line: 87
      }), 3);
      t.end();
    }).catch(function (err) {
      t.fail('ERR4: ' + err);
    });
  };

  new _statefulDemo2.default('test_state_key').load().then(function (demo) {
    var state = demo.state;
    state.x = 3;
    demo.save(callback); // line A
  }).catch(function (err) {
    t.fail('ERR5: ' + err);
  });
});

_ava2.default.cb('should save state without callback', function (t) {
  t.plan(1);

  // to be executed after save ("line B" below)
  var verify = function verify() {
    new _statefulDemo2.default('test_state_key').load().then(function (demo) {
      var _rec7 = new _powerAssertRecorder();

      t.is(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(demo, 'arguments/0/object/object').state, 'arguments/0/object').y, 'arguments/0'), {
        content: 't.is(demo.state.y, 4)',
        filepath: 'test/stateful-test.js',
        line: 111
      }), 4);
      t.end();
    }).catch(function (err) {
      t.fail('ERR6: ' + err);
    });
  };

  new _statefulDemo2.default('test_state_key').load().then(function (demo) {
    var state = demo.state;
    state.y = 4;
    demo.save();

    setTimeout(verify, 300); // line B
  }).catch(function (err) {
    t.fail('ERR7: ' + err);
  });
});

_ava2.default.cb('should update state values', function (t) {
  t.plan(3);

  new _statefulDemo2.default('test_state_key').load().then(function (demo) {
    var _rec8 = new _powerAssertRecorder(),
        _rec9 = new _powerAssertRecorder(),
        _rec10 = new _powerAssertRecorder();

    demo.setState({
      prop1: 1,
      prop2: 2
    });
    t.is(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(demo, 'arguments/0/object/object').state, 'arguments/0/object').prop1, 'arguments/0'), {
      content: 't.is(demo.state.prop1, 1)',
      filepath: 'test/stateful-test.js',
      line: 139
    }), 1);
    t.is(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(demo, 'arguments/0/object/object').state, 'arguments/0/object').prop2, 'arguments/0'), {
      content: 't.is(demo.state.prop2, 2)',
      filepath: 'test/stateful-test.js',
      line: 140
    }), 2);
    t.is(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(demo, 'arguments/0/object/object').state, 'arguments/0/object').foo, 'arguments/0'), {
      content: 't.is(demo.state.foo, 1)',
      filepath: 'test/stateful-test.js',
      line: 141
    }), 1); // should not affect existing data
    t.end();
  }).catch(function (err) {
    t.fail('ERR8: ' + err);
  });
});

_ava2.default.cb('should sync values between two storages with the same key', function (t) {
  t.plan(1);

  new _statefulDemo2.default('must_sync').load().then(function (demo) {
    var interval = setInterval(function () {
      if (demo.state.foo) {
        var _rec11 = new _powerAssertRecorder();

        clearInterval(interval);
        t.is(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(demo, 'arguments/0/object/object').state, 'arguments/0/object').foo, 'arguments/0'), {
          content: 't.is(demo.state.foo, 123)',
          filepath: 'test/stateful-test.js',
          line: 156
        }), 123);
        t.end();
      }
    }, 100);
  }).catch(function (err) {
    t.fail('ERR9: ' + err);
  });

  new _statefulDemo2.default('must_sync').load().then(function (demo) {
    var state = demo.state;
    state.foo = 123;
    demo.save();
  }).catch(function (err) {
    t.fail('ERR10: ' + err);
  });
});

_ava2.default.cb('should not sync values when disposed', function (t) {
  // update procedure, to be executed on "line C" below.
  var update = function update() {
    new _statefulDemo2.default('should_not_sync').load().then(function (demo) {
      var state = demo.state;
      state.foo = 123;
      demo.save();
    }).catch(function (err) {
      t.fail('ERR11: ' + err);
    });
  };

  new _statefulDemo2.default('should_not_sync').load().then(function (demo) {
    demo.dispose(); // dispose current
    update(); // line C. run procedure that updates storage with the same key

    // check every 100 ms, fail if updated
    var interval = setInterval(function () {
      if (demo.state.foo) {
        t.fail();
      }
    }, 100);

    // after one second consider it's passed, clear interval
    setTimeout(function () {
      clearInterval(interval);
      t.pass();
      t.end();
    }, 1000);
  }).catch(function (err) {
    t.fail('ERR12: ' + err);
  });
});
//# sourceMappingURL=../node_modules/.cache/ava/0543dfde26609f9fd514d6ba67490ace.js.map