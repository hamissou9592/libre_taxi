'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LibreTaxi, free and open source ride sharing platform.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Copyright (C) 2016-2017  Roman Pushkin
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            it under the terms of the GNU Affero General Public License as
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            published by the Free Software Foundation, either version 3 of the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            but WITHOUT ANY WARRANTY; without even the implied warranty of
or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GNU Affero General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            You should have received a copy of the GNU Affero General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        */

/* eslint-disable no-new, no-unused-vars, max-len */


var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _notifyDriversResponseHandler = require('../../../src/response-handlers/submit-order/notify-drivers-response-handler');

var _notifyDriversResponseHandler2 = _interopRequireDefault(_notifyDriversResponseHandler);

var _notifyDriversResponse = require('../../../src/responses/submit-order/notify-drivers-response');

var _notifyDriversResponse2 = _interopRequireDefault(_notifyDriversResponse);

var _checkNotNull = require('../../helpers/check-not-null.js');

var _checkNotNull2 = _interopRequireDefault(_checkNotNull);

var _firebaseServer = require('firebase-server');

var _firebaseServer2 = _interopRequireDefault(_firebaseServer);

var _firebaseDb = require('../../../src/firebase-db');

var _firebaseDb2 = _interopRequireDefault(_firebaseDb);

var _specSupport = require('../../spec-support');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _userFactory = require('../../../src/factories/user-factory');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _firebaseDb.overrideSettings)({
  STATEFUL_CONNSTR: 'ws://localhost.firebaseio.test:5505',
  STATEFUL_CREDENTIALS_FILE: undefined
});

var server = null;
var response = new _notifyDriversResponse2.default({ passengerKey: 'cli_1' });

_ava2.default.before(function () {
  server = new _firebaseServer2.default(5505, 'localhost.firebaseio.test', {
    users: {
      cli_1: {
        userType: 'passenger',
        currentOrderKey: '53845282-693f-4e7a-8479-87d421db6b94'
      }
    },
    orders: {
      '53845282-693f-4e7a-8479-87d421db6b94': {
        foo: 'bar'
      }
    }
  });
});

_ava2.default.after.always('guaranteed cleanup', function () {
  server.close();
});

(0, _checkNotNull2.default)('response', function (args) {
  new _notifyDriversResponseHandler2.default(args);
});

(0, _ava2.default)('can be constructed with default parameters', function (t) {
  new _notifyDriversResponseHandler2.default({ response: {} });
  t.pass();
});

_ava2.default.cb('should load order and query drivers when called', function (t) {
  t.plan(2);
  (0, _userFactory.loadUser)('cli_1').then(function (user) {
    var assert = function assert() {
      var _rec = new _powerAssertRecorder(),
          _rec2 = new _powerAssertRecorder();

      t.is(_rec._expr(_rec._capt(_rec._capt(_rec._capt(_rec._capt(handler, 'arguments/0/object/object/object').order, 'arguments/0/object/object').state, 'arguments/0/object').foo, 'arguments/0'), {
        content: 't.is(handler.order.state.foo, \'bar\')',
        filepath: 'test/response-handlers/submit-order/notify-drivers-response-handler-test.js',
        line: 69
      }), 'bar'); // eslint-disable-line no-use-before-define
      t.truthy(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(handler, 'arguments/0/callee/object/object').queryDrivers, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
        content: 't.truthy(handler.queryDrivers.calledWith())',
        filepath: 'test/response-handlers/submit-order/notify-drivers-response-handler-test.js',
        line: 70
      })); // eslint-disable-line no-use-before-define
      t.end();
    };

    var handler = new _notifyDriversResponseHandler2.default({ response: response, user: user });
    handler.queryDrivers = _specSupport.ss.sinon.spy();
    handler.call(assert);
  });
});

(0, _ava2.default)('should query drivers with geofire and setup key_entered callback', function (t) {
  var _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder();

  var handler = new _notifyDriversResponseHandler2.default({ response: response });
  var geoFireQuery = {
    on: _specSupport.ss.sinon.spy()
  };
  handler.geoFire = {
    query: _specSupport.ss.sinon.stub().returns(geoFireQuery)
  };
  handler.order = { state: { passengerLocation: 'foo' } };
  handler.queryDrivers();
  t.truthy(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(_rec3._capt(handler, 'arguments/0/callee/object/object/object').geoFire, 'arguments/0/callee/object/object').query, 'arguments/0/callee/object').calledWith(_rec3._capt({ center: 'foo', radius: 10 }, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.truthy(handler.geoFire.query.calledWith({ center: \'foo\', radius: 10 }))',
    filepath: 'test/response-handlers/submit-order/notify-drivers-response-handler-test.js',
    line: 90
  }));
  t.truthy(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(geoFireQuery, 'arguments/0/callee/object/object').on, 'arguments/0/callee/object').calledWith('key_entered', _rec4._capt(_rec4._capt(handler, 'arguments/0/arguments/1/object').keyEntered, 'arguments/0/arguments/1')), 'arguments/0'), {
    content: 't.truthy(geoFireQuery.on.calledWith(\'key_entered\', handler.keyEntered))',
    filepath: 'test/response-handlers/submit-order/notify-drivers-response-handler-test.js',
    line: 91
  }));
});

(0, _ava2.default)('should call notify driver method on key_entered callback', function (t) {
  var _rec5 = new _powerAssertRecorder();

  var spy = _specSupport.ss.sinon.spy();
  var handler = new _notifyDriversResponseHandler2.default({ response: response, notifyDriver: { call: spy } });
  handler.keyEntered('key', 'location', 'distance');
  t.truthy(_rec5._expr(_rec5._capt(_rec5._capt(spy, 'arguments/0/callee/object').calledWith('key', 'distance'), 'arguments/0'), {
    content: 't.truthy(spy.calledWith(\'key\', \'distance\'))',
    filepath: 'test/response-handlers/submit-order/notify-drivers-response-handler-test.js',
    line: 98
  }));
});
//# sourceMappingURL=../../../node_modules/.cache/ava/72d73386902ad61d8fc0c5ffec32675b.js.map