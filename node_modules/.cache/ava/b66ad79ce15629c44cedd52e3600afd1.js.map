{"version":3,"sources":["user-factory-test.js"],"names":["u","fromUserKey","t","truthy","is","userKey","cb","err","throws","end","plan","mock","pass"],"mappings":";;;;;;weAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,mBAAK,+BAAL,EAAsC,aAAK;AAAA;AAAA;;AACzC,MAAMA,IAAI,sBAAYC,WAAZ,CAAwB,OAAxB,CAAV;AACAC,IAAEC,MAAF,uBAASH,CAAT;AAAA;AAAA;AAAA;AAAA;AACAE,IAAEE,EAAF,yBAAK,qCAAEC,OAAP;AAAA;AAAA;AAAA;AAAA,MAAgB,OAAhB;AACD,CAJD;;AAMA,cAAKC,EAAL,CAAQ,+CAAR,EAAyD,aAAK;AAC5D,MAAMC,MAAM,uBAAZ;AACAL,IAAEM,MAAF;AAAA,WAAS,YAAM;AAAE,4BAAYP,WAAZ;AAA4B,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA+CM,GAA/C;AACAL,IAAEO,GAAF;AACD,CAJD;;AAMA,cAAKH,EAAL,CAAQ,6CAAR,EAAuD,aAAK;AAC1DJ,IAAEQ,IAAF,CAAO,CAAP;AACA,MAAMC,OAAO,SAAPA,IAAO,GAAM;AAAET,MAAEU,IAAF,GAAUV,EAAEO,GAAF;AAAU,GAAzC;AACA,iCAAaE,IAAb;AACA;AACD,CALD","file":"user-factory-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport test from 'ava';\nimport UserFactory, { loadUser, mockLoadUser } from '../../src/factories/user-factory';\n\ntest('should create user by userKey', t => {\n  const u = UserFactory.fromUserKey('cli_1');\n  t.truthy(u);\n  t.is(u.userKey, 'cli_1');\n});\n\ntest.cb('should throw error when userKey not specified', t => {\n  const err = 'userKey not specified';\n  t.throws(() => { UserFactory.fromUserKey(); }, err);\n  t.end();\n});\n\ntest.cb('mockLoadUser should mock loadUser with mock', t => {\n  t.plan(1);\n  const mock = () => { t.pass(); t.end(); };\n  mockLoadUser(mock);\n  loadUser();\n});\n"]}