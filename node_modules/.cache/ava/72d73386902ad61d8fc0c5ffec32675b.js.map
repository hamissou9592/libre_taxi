{"version":3,"sources":["notify-drivers-response-handler-test.js"],"names":["STATEFUL_CONNSTR","STATEFUL_CREDENTIALS_FILE","undefined","server","response","passengerKey","before","users","cli_1","userType","currentOrderKey","orders","foo","after","always","close","args","t","pass","cb","plan","then","user","assert","is","order","state","truthy","queryDrivers","calledWith","end","handler","sinon","spy","call","geoFireQuery","on","geoFire","query","stub","returns","passengerLocation","center","radius","keyEntered","notifyDriver"],"mappings":"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","file":"notify-drivers-response-handler-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new, no-unused-vars, max-len */\nimport test from 'ava';\nimport NotifyDriversResponseHandler from '../../../src/response-handlers/submit-order/notify-drivers-response-handler';\nimport NotifyDriversResponse from '../../../src/responses/submit-order/notify-drivers-response';\nimport checkNotNullTest from '../../helpers/check-not-null.js';\nimport FirebaseServer from 'firebase-server';\nimport firebaseDB, { overrideSettings } from '../../../src/firebase-db';\nimport { ss } from '../../spec-support';\nimport sinon from 'sinon';\nimport { loadUser } from '../../../src/factories/user-factory';\n\noverrideSettings({\n  STATEFUL_CONNSTR: 'ws://localhost.firebaseio.test:5505',\n  STATEFUL_CREDENTIALS_FILE: undefined,\n});\n\nlet server = null;\nconst response = new NotifyDriversResponse({ passengerKey: 'cli_1' });\n\ntest.before(() => {\n  server = new FirebaseServer(5505, 'localhost.firebaseio.test', {\n    users: {\n      cli_1: {\n        userType: 'passenger',\n        currentOrderKey: '53845282-693f-4e7a-8479-87d421db6b94',\n      },\n    },\n    orders: {\n      '53845282-693f-4e7a-8479-87d421db6b94': {\n        foo: 'bar',\n      },\n    },\n  });\n});\n\ntest.after.always('guaranteed cleanup', () => {\n  server.close();\n});\n\ncheckNotNullTest('response', (args) => { new NotifyDriversResponseHandler(args); });\n\ntest('can be constructed with default parameters', t => {\n  new NotifyDriversResponseHandler({ response: {} });\n  t.pass();\n});\n\ntest.cb('should load order and query drivers when called', t => {\n  t.plan(2);\n  loadUser('cli_1').then((user) => {\n    const assert = () => {\n      t.is(handler.order.state.foo, 'bar'); // eslint-disable-line no-use-before-define\n      t.truthy(handler.queryDrivers.calledWith());  // eslint-disable-line no-use-before-define\n      t.end();\n    };\n\n    const handler = new NotifyDriversResponseHandler({ response, user });\n    handler.queryDrivers = ss.sinon.spy();\n    handler.call(assert);\n  });\n});\n\ntest('should query drivers with geofire and setup key_entered callback', t => {\n  const handler = new NotifyDriversResponseHandler({ response });\n  const geoFireQuery = {\n    on: ss.sinon.spy(),\n  };\n  handler.geoFire = {\n    query: ss.sinon.stub().returns(geoFireQuery),\n  };\n  handler.order = { state: { passengerLocation: 'foo' } };\n  handler.queryDrivers();\n  t.truthy(handler.geoFire.query.calledWith({ center: 'foo', radius: 10 }));\n  t.truthy(geoFireQuery.on.calledWith('key_entered', handler.keyEntered));\n});\n\ntest('should call notify driver method on key_entered callback', t => {\n  const spy = ss.sinon.spy();\n  const handler = new NotifyDriversResponseHandler({ response, notifyDriver: { call: spy } });\n  handler.keyEntered('key', 'location', 'distance');\n  t.truthy(spy.calledWith('key', 'distance'));\n});\n"]}