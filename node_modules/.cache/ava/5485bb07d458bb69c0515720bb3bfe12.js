'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LibreTaxi, free and open source ride sharing platform.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Copyright (C) 2016-2017  Roman Pushkin
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            it under the terms of the GNU Affero General Public License as
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            published by the Free Software Foundation, either version 3 of the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            but WITHOUT ANY WARRANTY; without even the implied warranty of
or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GNU Affero General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            You should have received a copy of the GNU Affero General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        */

/* eslint-disable no-new */


var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _all = require('../../src/conditions/all');

var _all2 = _interopRequireDefault(_all);

var _specSupport = require('../spec-support');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('can be constructed with default parameters', function (t) {
  var _rec = new _powerAssertRecorder();

  var c = new _all2.default(1, 2, 3);
  t.is(_rec._expr(_rec._capt(_rec._capt(c, 'arguments/0/object').type, 'arguments/0'), {
    content: 't.is(c.type, \'all\')',
    filepath: 'test/conditions/all-test.js',
    line: 26
  }), 'all');
});

(0, _ava2.default)('should be callable and truthy if no params provided', function (t) {
  var _rec2 = new _powerAssertRecorder();

  var c = new _all2.default();
  t.is(_rec2._expr(_rec2._capt(_rec2._capt(c, 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.is(c.call(), true)',
    filepath: 'test/conditions/all-test.js',
    line: 31
  }), true);
});

(0, _ava2.default)('should work for one condition when condition returns true', function (t) {
  var _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder();

  var one = {
    call: _specSupport.ss.sinon.stub().returns(true)
  };
  var c = new _all2.default(one);
  t.is(_rec3._expr(_rec3._capt(_rec3._capt(c, 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.is(c.call(), true)',
    filepath: 'test/conditions/all-test.js',
    line: 41
  }), true);
  t.is(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(one, 'arguments/0/callee/object/object').call, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.is(one.call.calledWith(), true)',
    filepath: 'test/conditions/all-test.js',
    line: 42
  }), true);
});

(0, _ava2.default)('should work for one condition when condition returns false', function (t) {
  var _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder();

  var one = {
    call: _specSupport.ss.sinon.stub().returns(false)
  };
  var c = new _all2.default(one);
  t.is(_rec5._expr(_rec5._capt(_rec5._capt(c, 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.is(c.call(), false)',
    filepath: 'test/conditions/all-test.js',
    line: 52
  }), false);
  t.is(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(one, 'arguments/0/callee/object/object').call, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.is(one.call.calledWith(), true)',
    filepath: 'test/conditions/all-test.js',
    line: 53
  }), true);
});

(0, _ava2.default)('should return true when multiple conditions return true', function (t) {
  var _rec7 = new _powerAssertRecorder(),
      _rec8 = new _powerAssertRecorder(),
      _rec9 = new _powerAssertRecorder();

  var one = {
    call: _specSupport.ss.sinon.stub().returns(true)
  };
  var two = {
    call: _specSupport.ss.sinon.stub().returns(true)
  };
  var c = new _all2.default(one, two);
  t.is(_rec7._expr(_rec7._capt(_rec7._capt(c, 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.is(c.call(), true)',
    filepath: 'test/conditions/all-test.js',
    line: 67
  }), true);
  t.is(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(one, 'arguments/0/callee/object/object').call, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.is(one.call.calledWith(), true)',
    filepath: 'test/conditions/all-test.js',
    line: 68
  }), true);
  t.is(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(two, 'arguments/0/callee/object/object').call, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.is(two.call.calledWith(), true)',
    filepath: 'test/conditions/all-test.js',
    line: 69
  }), true);
});

(0, _ava2.default)('should return false when one of conditions returns false', function (t) {
  var _rec10 = new _powerAssertRecorder(),
      _rec11 = new _powerAssertRecorder(),
      _rec12 = new _powerAssertRecorder();

  var one = {
    call: _specSupport.ss.sinon.stub().returns(true)
  };
  var two = {
    call: _specSupport.ss.sinon.stub().returns(false)
  };
  var c = new _all2.default(one, two);
  t.is(_rec10._expr(_rec10._capt(_rec10._capt(c, 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.is(c.call(), false)',
    filepath: 'test/conditions/all-test.js',
    line: 83
  }), false);
  t.is(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(one, 'arguments/0/callee/object/object').call, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.is(one.call.calledWith(), true)',
    filepath: 'test/conditions/all-test.js',
    line: 84
  }), true);
  t.is(_rec12._expr(_rec12._capt(_rec12._capt(_rec12._capt(two, 'arguments/0/callee/object/object').call, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.is(two.call.calledWith(), true)',
    filepath: 'test/conditions/all-test.js',
    line: 85
  }), true);
});
//# sourceMappingURL=../../node_modules/.cache/ava/5485bb07d458bb69c0515720bb3bfe12.js.map