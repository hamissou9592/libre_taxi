{"version":3,"sources":["not-in-test.js"],"names":["c1","t","is","type","c2","truthy","call","falsy"],"mappings":";;weAAA;;;;;;;;;;;;;;;;;;AAkBA;;;AACA;;;;AACA;;;;;;AAEA,mBAAK,4CAAL,EAAmD,aAAK;AAAA;;AACtD,MAAMA,KAAK,oBAAU,CAAV,EAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAb,CAAX;AACAC,IAAEC,EAAF,uBAAK,qCAAGC,IAAR;AAAA;AAAA;AAAA;AAAA,MAAc,QAAd;AACD,CAHD;;AAKA,mBAAK,sCAAL,EAA6C,aAAK;AAAA;AAAA;;AAChD,MAAMH,KAAK,oBAAU,CAAV,EAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAb,CAAX;AACA,MAAMI,KAAK,oBAAU,KAAV,EAAiB,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,CAAjB,CAAX;AACAH,IAAEI,MAAF,yBAAS,6CAAGC,IAAH,EAAT;AAAA;AAAA;AAAA;AAAA;AACAL,IAAEI,MAAF,yBAAS,6CAAGC,IAAH,EAAT;AAAA;AAAA;AAAA;AAAA;AACD,CALD;;AAOA,mBAAK,iCAAL,EAAwC,aAAK;AAAA;AAAA;;AAC3C,MAAMN,KAAK,oBAAU,CAAV,EAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAb,CAAX;AACA,MAAMI,KAAK,oBAAU,MAAV,EAAkB,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,CAAlB,CAAX;AACAH,IAAEM,KAAF,yBAAQ,6CAAGD,IAAH,EAAR;AAAA;AAAA;AAAA;AAAA;AACAL,IAAEM,KAAF,yBAAQ,6CAAGD,IAAH,EAAR;AAAA;AAAA;AAAA;AAAA;AACD,CALD","file":"not-in-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new */\nimport test from 'ava';\nimport NotIn from '../../src/conditions/not-in';\n\ntest('can be constructed with default parameters', t => {\n  const c1 = new NotIn(2, [2, 4, 6]);\n  t.is(c1.type, 'not-in');\n});\n\ntest('should be truthy when element not in', t => {\n  const c1 = new NotIn(1, [2, 4, 6]);\n  const c2 = new NotIn('one', ['two', 'four', 'six']);\n  t.truthy(c1.call());\n  t.truthy(c2.call());\n});\n\ntest('should be falsy when element in', t => {\n  const c1 = new NotIn(4, [2, 4, 6]);\n  const c2 = new NotIn('four', ['two', 'four', 'six']);\n  t.falsy(c1.call());\n  t.falsy(c2.call());\n});\n"]}