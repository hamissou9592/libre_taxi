{"version":3,"sources":["options-response-handler-test.js"],"names":["args","responseObject","rows","label","value","response","t","pass","user","platformId","h","api","sendMessage","sinon","stub","returns","catch","call","fail","truthy","calledWith","disable_notification","reply_markup","stringify","keyboard","one_time_keyboard","defaultMessage"],"mappings":";;weAAA;;;;;;;;;;;;;;;;;;AAkBA;AAEuG;;;AADvG;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,4BAAiB,UAAjB,EAA6B,UAACA,IAAD,EAAU;AAAE,uCAA2BA,IAA3B;AAAmC,CAA5E;;AAEA,IAAMC,iBAAiB,8BAAoB;AACzCC,QAAM,CACJ,CAAC,EAAEC,OAAO,KAAT,EAAgBC,OAAO,GAAvB,EAAD,EAA+B,EAAED,OAAO,KAAT,EAAgBC,OAAO,GAAvB,EAA/B,EAA6D,EAAED,OAAO,OAAT,EAAkBC,OAAO,GAAzB,EAA7D,CADI,EAEJ,CAAC,EAAED,OAAO,IAAT,EAAeC,OAAO,IAAtB,EAAD,EAA+B,EAAED,OAAO,QAAT,EAAmBC,OAAO,QAA1B,EAA/B,CAFI;AADmC,CAApB,CAAvB;;AAOA,mBAAK,4CAAL,EAAmD,aAAK;AACtD,uCAA2B,EAAEC,UAAU,EAAZ,EAA3B;AACAC,IAAEC,IAAF;AACD,CAHD;;AAKA,mBAAK,yBAAL,EAAgC,aAAK;AAAA;;AACnC,MAAMC,OAAO,EAAEC,YAAY,KAAd,EAAb;AACA,MAAMC,IAAI,qCAA2B,EAAEL,UAAUJ,cAAZ,EAA4BO,UAA5B,EAA3B,CAAV;AACAE,IAAEC,GAAF,GAAQ,EAAEC,aAAa,gBAAGC,KAAH,CAASC,IAAT,GAAgBC,OAAhB,CAAwB,EAAEC,OAAO,kBAAM,CAAE,CAAjB,EAAxB,CAAf,EAAR;AACAN,IAAEO,IAAF,CAAO;AAAA,WAAMX,EAAEY,IAAF,EAAN;AAAA,GAAP,EAJmC,CAIX;AACxBZ,IAAEa,MAAF,uBAAS,+EAAER,GAAF,sCAAMC,WAAN,+BAAkBQ,UAAlB,CAA6B,KAA7B,EAAoC,cAApC,aAAoD;AAC3DC,0BAAsB,IADqC;AAE3DC,6BACE,6EAAKC,SAAL,YAAe;AACbC,2BAAU,YACR,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,CADQ,sGAER,CAAC,IAAD,EAAO,QAAP,CAFQ,0FAAV,8EADa;AAKbC,yBAAmB;AALN,KAAf,4DADF;AAF2D,GAApD,6BAAT;AAAA;AAAA;AAAA;AAAA;AAWD,CAhBD;;AAkBA,mBAAK,mDAAL,EAA0D,aAAK;AAAA;;AAC7D,MAAMjB,OAAO,EAAEC,YAAY,KAAd,EAAb;AACA,MAAMC,IAAI,qCAA2B;AACnCL,cAAU,8BAAoB,EAAEH,MAAMD,eAAeC,IAAvB,EAA6BwB,gBAAgB,iBAA7C,EAApB,CADyB;AAEnClB;AAFmC,GAA3B,CAAV;AAIAE,IAAEC,GAAF,GAAQ,EAAEC,aAAa,gBAAGC,KAAH,CAASC,IAAT,GAAgBC,OAAhB,CAAwB,EAAEC,OAAO,kBAAM,CAAE,CAAjB,EAAxB,CAAf,EAAR;AACAN,IAAEO,IAAF,CAAO;AAAA,WAAMX,EAAEY,IAAF,EAAN;AAAA,GAAP,EAP6D,CAOrC;AACxBZ,IAAEa,MAAF,yBAAS,kFAAER,GAAF,sCAAMC,WAAN,+BAAkBQ,UAAlB,CAA6B,KAA7B,EAAoC,iBAApC,cAAuD;AAC9DC,0BAAsB,IADwC;AAE9DC,8BACE,8EAAKC,SAAL,aAAe;AACbC,4BAAU,aACR,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,CADQ,uGAER,CAAC,IAAD,EAAO,QAAP,CAFQ,0FAAV,8EADa;AAKbC,yBAAmB;AALN,KAAf,4DADF;AAF8D,GAAvD,6BAAT;AAAA;AAAA;AAAA;AAAA;AAWD,CAnBD","file":"options-response-handler-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new, no-console */\nimport test from 'ava';\nimport OptionsResponseHandler from '../../../src/response-handlers/telegram/options-response-handler'; // eslint-disable-line max-len\nimport OptionsResponse from '../../../src/responses/options-response';\nimport checkNotNullTest from '../../helpers/check-not-null.js';\nimport { ss } from '../../spec-support';\n\ncheckNotNullTest('response', (args) => { new OptionsResponseHandler(args); });\n\nconst responseObject = new OptionsResponse({\n  rows: [\n    [{ label: 'One', value: '1' }, { label: 'Two', value: '2' }, { label: 'Three', value: '3' }],\n    [{ label: 'OK', value: 'ok' }, { label: 'Cancel', value: 'cancel' }],\n  ],\n});\n\ntest('can be constructed with default parameters', t => {\n  new OptionsResponseHandler({ response: {} });\n  t.pass();\n});\n\ntest('should call sendMessage', t => {\n  const user = { platformId: 31337 };\n  const h = new OptionsResponseHandler({ response: responseObject, user });\n  h.api = { sendMessage: ss.sinon.stub().returns({ catch: () => {} }) };\n  h.call(() => t.fail()); // and should not call onResult\n  t.truthy(h.api.sendMessage.calledWith(31337, 'Your choice?', {\n    disable_notification: true,\n    reply_markup:\n      JSON.stringify({\n        keyboard: [\n          ['One', 'Two', 'Three'],\n          ['OK', 'Cancel'],\n        ],\n        one_time_keyboard: true,\n      }),\n  }));\n});\n\ntest('should call sendMessage with default text message', t => {\n  const user = { platformId: 31337 };\n  const h = new OptionsResponseHandler({\n    response: new OptionsResponse({ rows: responseObject.rows, defaultMessage: 'default message' }),\n    user,\n  });\n  h.api = { sendMessage: ss.sinon.stub().returns({ catch: () => {} }) };\n  h.call(() => t.fail()); // and should not call onResult\n  t.truthy(h.api.sendMessage.calledWith(31337, 'default message', {\n    disable_notification: true,\n    reply_markup:\n      JSON.stringify({\n        keyboard: [\n          ['One', 'Two', 'Three'],\n          ['OK', 'Cancel'],\n        ],\n        one_time_keyboard: true,\n      }),\n  }));\n});\n"]}