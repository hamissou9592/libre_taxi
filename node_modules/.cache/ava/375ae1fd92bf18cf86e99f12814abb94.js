'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LibreTaxi, free and open source ride sharing platform.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Copyright (C) 2016-2017  Roman Pushkin
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            it under the terms of the GNU Affero General Public License as
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            published by the Free Software Foundation, either version 3 of the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GNU Affero General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            You should have received a copy of the GNU Affero General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        */

/* eslint-disable no-new, max-len */


var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _inlineOptionsResponseHandler = require('../../../src/response-handlers/telegram/inline-options-response-handler');

var _inlineOptionsResponseHandler2 = _interopRequireDefault(_inlineOptionsResponseHandler);

var _optionsResponse = require('../../../src/responses/options-response');

var _optionsResponse2 = _interopRequireDefault(_optionsResponse);

var _checkNotNull = require('../../helpers/check-not-null.js');

var _checkNotNull2 = _interopRequireDefault(_checkNotNull);

var _specSupport = require('../../spec-support');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _checkNotNull2.default)('response', function (args) {
  new _inlineOptionsResponseHandler2.default(args);
});

var responseObject = new _optionsResponse2.default({
  rows: [[{ label: 'One', value: '1' }, { label: 'Two', value: '2' }, { label: 'Three', value: '3' }], [{ label: 'OK', value: 'ok' }, { label: 'Cancel', value: 'cancel' }]]
});

(0, _ava2.default)('can be constructed with default parameters', function (t) {
  new _inlineOptionsResponseHandler2.default({ response: {} });
  t.pass();
});

_ava2.default.cb('should call sendMessage', function (t) {
  t.plan(1);
  var user = { platformId: 31337 };
  var h = new _inlineOptionsResponseHandler2.default({ response: responseObject, user: user });
  h.api = { sendMessage: _specSupport.ss.sinon.stub().returns({ catch: function _catch() {} }) };
  h.call(function () {
    var _rec = new _powerAssertRecorder();

    // should call onResult
    t.truthy(_rec._expr(_rec._capt(_rec._capt(_rec._capt(_rec._capt(h, 'arguments/0/callee/object/object/object').api, 'arguments/0/callee/object/object').sendMessage, 'arguments/0/callee/object').calledWith(31337, 'Your choice?', _rec._capt({
      disable_notification: true,
      reply_markup: _rec._capt(_rec._capt(JSON, 'arguments/0/arguments/2/properties/1/value/callee/object').stringify(_rec._capt({
        inline_keyboard: _rec._capt([_rec._capt([_rec._capt({ text: 'One', callback_data: '1' }, 'arguments/0/arguments/2/properties/1/value/arguments/0/properties/0/value/elements/0/elements/0'), _rec._capt({ text: 'Two', callback_data: '2' }, 'arguments/0/arguments/2/properties/1/value/arguments/0/properties/0/value/elements/0/elements/1'), _rec._capt({ text: 'Three', callback_data: '3' }, 'arguments/0/arguments/2/properties/1/value/arguments/0/properties/0/value/elements/0/elements/2')], 'arguments/0/arguments/2/properties/1/value/arguments/0/properties/0/value/elements/0'), _rec._capt([_rec._capt({ text: 'OK', callback_data: 'ok' }, 'arguments/0/arguments/2/properties/1/value/arguments/0/properties/0/value/elements/1/elements/0'), _rec._capt({ text: 'Cancel', callback_data: 'cancel' }, 'arguments/0/arguments/2/properties/1/value/arguments/0/properties/0/value/elements/1/elements/1')], 'arguments/0/arguments/2/properties/1/value/arguments/0/properties/0/value/elements/1')], 'arguments/0/arguments/2/properties/1/value/arguments/0/properties/0/value')
      }, 'arguments/0/arguments/2/properties/1/value/arguments/0')), 'arguments/0/arguments/2/properties/1/value')
    }, 'arguments/0/arguments/2')), 'arguments/0'), {
      content: 't.truthy(h.api.sendMessage.calledWith(31337, \'Your choice?\', { disable_notification: true, reply_markup: JSON.stringify({ inline_keyboard: [[{ text: \'One\', callback_data: \'1\' }, { text: \'Two\', callback_data: \'2\' }, { text: \'Three\', callback_data: \'3\' }], [{ text: \'OK\', callback_data: \'ok\' }, { text: \'Cancel\', callback_data: \'cancel\' }]] }) }))',
      filepath: 'test/response-handlers/telegram/inline-options-response-handler-test.js',
      line: 46
    }));
    t.end();
  });
});

_ava2.default.cb('should call sendMessage with default message', function (t) {
  t.plan(1);
  var user = { platformId: 31337 };
  var h = new _inlineOptionsResponseHandler2.default({
    response: new _optionsResponse2.default({ rows: responseObject.rows, defaultMessage: 'foo' }),
    user: user
  });
  h.api = { sendMessage: _specSupport.ss.sinon.stub().returns({ catch: function _catch() {} }) };
  h.call(function () {
    var _rec2 = new _powerAssertRecorder();

    // should call onResult
    t.truthy(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(_rec2._capt(h, 'arguments/0/callee/object/object/object').api, 'arguments/0/callee/object/object').sendMessage, 'arguments/0/callee/object').calledWith(31337, 'foo', _rec2._capt({
      disable_notification: true,
      reply_markup: _rec2._capt(_rec2._capt(JSON, 'arguments/0/arguments/2/properties/1/value/callee/object').stringify(_rec2._capt({
        inline_keyboard: _rec2._capt([_rec2._capt([_rec2._capt({ text: 'One', callback_data: '1' }, 'arguments/0/arguments/2/properties/1/value/arguments/0/properties/0/value/elements/0/elements/0'), _rec2._capt({ text: 'Two', callback_data: '2' }, 'arguments/0/arguments/2/properties/1/value/arguments/0/properties/0/value/elements/0/elements/1'), _rec2._capt({ text: 'Three', callback_data: '3' }, 'arguments/0/arguments/2/properties/1/value/arguments/0/properties/0/value/elements/0/elements/2')], 'arguments/0/arguments/2/properties/1/value/arguments/0/properties/0/value/elements/0'), _rec2._capt([_rec2._capt({ text: 'OK', callback_data: 'ok' }, 'arguments/0/arguments/2/properties/1/value/arguments/0/properties/0/value/elements/1/elements/0'), _rec2._capt({ text: 'Cancel', callback_data: 'cancel' }, 'arguments/0/arguments/2/properties/1/value/arguments/0/properties/0/value/elements/1/elements/1')], 'arguments/0/arguments/2/properties/1/value/arguments/0/properties/0/value/elements/1')], 'arguments/0/arguments/2/properties/1/value/arguments/0/properties/0/value')
      }, 'arguments/0/arguments/2/properties/1/value/arguments/0')), 'arguments/0/arguments/2/properties/1/value')
    }, 'arguments/0/arguments/2')), 'arguments/0'), {
      content: 't.truthy(h.api.sendMessage.calledWith(31337, \'foo\', { disable_notification: true, reply_markup: JSON.stringify({ inline_keyboard: [[{ text: \'One\', callback_data: \'1\' }, { text: \'Two\', callback_data: \'2\' }, { text: \'Three\', callback_data: \'3\' }], [{ text: \'OK\', callback_data: \'ok\' }, { text: \'Cancel\', callback_data: \'cancel\' }]] }) }))',
      filepath: 'test/response-handlers/telegram/inline-options-response-handler-test.js',
      line: 76
    }));
    t.end();
  });
});
//# sourceMappingURL=../../../node_modules/.cache/ava/375ae1fd92bf18cf86e99f12814abb94.js.map