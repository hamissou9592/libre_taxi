{"version":3,"sources":["history-hash-test.js"],"names":["hh","t","is","capacity","hh2","merge","foo","hash","history","bar","deepEqual","a","b","c","d","e"],"mappings":"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","file":"history-hash-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport test from 'ava';\nimport HistoryHash from '../../src/support/history-hash';\n\ntest('should accept empty parameters and have capacity set by default', t => {\n  const hh = new HistoryHash();\n  t.is(hh.capacity, 30);\n});\n\ntest('should accept empty parameters and merge', t => {\n  const hh = new HistoryHash();\n  const hh2 = hh.merge({ foo: 'bar' });\n  t.is(hh2.hash.foo, 'bar');\n});\n\ntest('should accept hash and preserve existing params', t => {\n  const hh = new HistoryHash({\n    history: ['bar', 'foo'],\n    hash: { foo: 11, bar: 22 },\n  });\n  const hh2 = hh.merge({ foo: 111 });\n  t.deepEqual(hh2.hash, { foo: 111, bar: 22 });\n  t.deepEqual(hh2.history, ['bar', 'foo']);\n});\n\ntest('should remove old elements from hash and history', t => {\n  const hh = new HistoryHash({\n    capacity: 2,\n    history: ['b', 'a'], // b is the oldest\n    hash: { a: 1, b: 2 },\n  });\n  const hh2 = hh.merge({ c: 3 });\n  t.deepEqual(hh2.hash, { a: 1, c: 3 });\n  t.deepEqual(hh2.history, ['a', 'c']);\n});\n\ntest('should add params up to capacity', t => {\n  const hh = new HistoryHash({\n    capacity: 4,\n    history: ['b', 'a'],\n    hash: { a: 1, b: 2 },\n  });\n  const hh2 = hh.merge({ c: 3, d: 4, e: 5 });\n  t.deepEqual(hh2.hash, { a: 1, c: 3, d: 4, e: 5 });\n  t.deepEqual(hh2.history[0], 'a');\n});\n\ntest('should not mutate existing object', t => {\n  const hh = new HistoryHash({\n    capacity: 4,\n    history: ['b', 'a'],\n    hash: { a: 1, b: 2 },\n  });\n  hh.merge({ c: 3, d: 4, e: 5 });\n  t.deepEqual(hh, { capacity: 4, history: ['b', 'a'], hash: { a: 1, b: 2 } });\n});\n"]}