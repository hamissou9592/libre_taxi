{"version":3,"sources":["request-phone-test.js"],"names":["i18n","user","t","pass","action","response","get","is","type","responses","message","__","buttonText","state","userType","post","phone","path","cb","err","plan","throws","end"],"mappings":"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","file":"request-phone-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new, no-unused-vars */\nimport test from 'ava';\nimport routes from '../../src/routes'; // to aviod circular dependencies\nimport RequestPhone from '../../src/actions/menu/request-phone';\nimport { i18n } from '../spec-support';\n\ntest('can be constructed with default parameters', t => {\n  new RequestPhone({ i18n, user: {} });\n  t.pass();\n});\n\ntest('should return composite response on get', t => {\n  const action = new RequestPhone({ i18n, user: {} });\n  const response = action.get();\n  t.is(response.type, 'composite');\n  t.is(response.responses[0].type, 'text');\n  t.is(response.responses[0].message, i18n.__('request-phone.type_your_phone'));\n  t.is(response.responses[1].type, 'request-phone');\n  t.is(response.responses[1].buttonText, i18n.__('request-phone.button_text'));\n});\n\ntest('should return composite response on post for driver', t => {\n  const user = { state: { userType: 'driver' } };\n\n  const action = new RequestPhone({ i18n, user });\n  const response = action.post('+1 (555) 111-22-33');\n  t.is(response.type, 'composite');\n  t.is(response.responses[0].type, 'user-state');\n  t.is(response.responses[0].state.phone, '+1 (555) 111-22-33');\n  t.is(response.responses[1].type, 'text');\n  t.is(response.responses[1].message, 'ðŸ‘Œ OK!');\n  t.is(response.responses[2].type, 'redirect');\n  t.is(response.responses[2].path, 'driver-select-vehicle-type');\n});\n\ntest('should return different composite response on post for passenger', t => {\n  const user = { state: { userType: 'passenger' } };\n\n  const action = new RequestPhone({ i18n, user });\n  const response = action.post('+1 (555) 111-22-33');\n  t.is(response.type, 'composite');\n  t.is(response.responses[0].type, 'user-state');\n  t.is(response.responses[0].state.phone, '+1 (555) 111-22-33');\n  t.is(response.responses[1].type, 'text');\n  t.is(response.responses[1].message, i18n.__('request-phone.all_set'));\n  t.is(response.responses[2].type, 'redirect');\n  t.is(response.responses[2].path, 'passenger-index');\n});\n\ntest.cb('should throw error on post for unknown user type', t => {\n  const user = { state: { userType: 'unknown' } };\n  const action = new RequestPhone({ i18n, user });\n  const err = 'unsupported user type';\n\n  t.plan(1);\n  t.throws(() => { action.post('whatever'); }, err);\n  t.end();\n});\n"]}