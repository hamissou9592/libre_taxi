{"version":3,"sources":["update-location-response-handler-test.js"],"names":["STATEFUL_CONNSTR","STATEFUL_CREDENTIALS_FILE","undefined","server","before","users","cli_1","foo","bar","after","always","close","args","response","user","t","pass","cb","plan","platformType","platformId","load","then","falsy","state","l","locationUpdatedAt","location","handler","call","truthy","is","end","err","assert","actualMessage","expectedMessage","console","log","tmp","fakeGeoFire","set","resolve","reject","geoFire"],"mappings":"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","file":"update-location-response-handler-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new, no-console */\nimport test from 'ava';\nimport UpdateLocationResponseHandler from '../../src/response-handlers/update-location-response-handler'; // eslint-disable-line max-len\nimport UpdateLocationResponse from '../../src/responses/update-location-response';\nimport checkNotNullTest from '../helpers/check-not-null.js';\nimport User from '../../src/user';\nimport FirebaseServer from 'firebase-server';\nimport { overrideSettings } from '../../src/firebase-db';\n\noverrideSettings({\n  STATEFUL_CONNSTR: 'ws://localhost.firebaseio.test:5503',\n  STATEFUL_CREDENTIALS_FILE: undefined,\n});\n\nlet server = null;\n\ntest.before(() => {\n  server = new FirebaseServer(5503, 'localhost.firebaseio.test', {\n    users: {\n      cli_1: { foo: 1, bar: 2 },\n    },\n  });\n});\n\ntest.after.always('guaranteed cleanup', () => {\n  server.close();\n});\n\ncheckNotNullTest(['response', 'user'], (args) => { new UpdateLocationResponseHandler(args); });\n\ntest('can be constructed with default parameters', t => {\n  new UpdateLocationResponseHandler({ response: {}, user: {} });\n  t.pass();\n});\n\ntest.cb('updates user object', t => {\n  t.plan(6);\n\n  new User({ platformType: 'cli', platformId: 1 }).load().then((user) => {\n    t.falsy(user.state.l);\n    t.falsy(user.state.locationUpdatedAt);\n\n    const response = new UpdateLocationResponse({ location: [37.421955, -122.084058] });\n    const handler = new UpdateLocationResponseHandler({ response, user });\n\n    handler.call(() => {\n      t.truthy(user.state.l);\n      t.is(user.state.locationUpdatedAt > 1473218180745, true); // 07 Sep 2016 03:16:20.745 GMT\n      t.is(user.state.l[0], 37.421955);\n      t.is(user.state.l[1], -122.084058);\n      t.end();\n    });\n  });\n});\n//\ntest.cb('handles error while saving location', t => {\n  const err = 'Sample error';\n\n  // assert function, to be executed on `act`\n  const assert = (actualMessage) => {\n    const expectedMessage = `Error in UpdateLocationResponseHandler: ${err}`;\n    t.is(actualMessage, expectedMessage);\n    t.end();\n\n    // cleanup\n    console.log = tmp; // eslint-disable-line no-use-before-define\n  };\n\n  // arrange: replace `console.log` with `assert` function created above\n  const tmp = console.log;\n  console.log = assert;\n\n  // arrange: create fake geoFire, it will replace `handler.geoFire`\n  const fakeGeoFire = { set: () => new Promise((resolve, reject) => { reject(err); }) };\n\n  // act: load user and execute handler with replaced `geoFire`\n  new User({ platformType: 'cli', platformId: 1 }).load().then((user) => {\n    const response = new UpdateLocationResponse({ location: [37.421955, -122.084058] });\n    const handler = new UpdateLocationResponseHandler({ response, user });\n    handler.geoFire = fakeGeoFire;\n    handler.call(() => {});\n  });\n});\n"]}