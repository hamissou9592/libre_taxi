'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LibreTaxi, free and open source ride sharing platform.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Copyright (C) 2016-2017  Roman Pushkin
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            it under the terms of the GNU Affero General Public License as
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            published by the Free Software Foundation, either version 3 of the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            but WITHOUT ANY WARRANTY; without even the implied warranty of
or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GNU Affero General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            You should have received a copy of the GNU Affero General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        */

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _historyHash = require('../../src/support/history-hash');

var _historyHash2 = _interopRequireDefault(_historyHash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('should accept empty parameters and have capacity set by default', function (t) {
  var _rec = new _powerAssertRecorder();

  var hh = new _historyHash2.default();
  t.is(_rec._expr(_rec._capt(_rec._capt(hh, 'arguments/0/object').capacity, 'arguments/0'), {
    content: 't.is(hh.capacity, 30)',
    filepath: 'test/support/history-hash-test.js',
    line: 24
  }), 30);
});

(0, _ava2.default)('should accept empty parameters and merge', function (t) {
  var _rec2 = new _powerAssertRecorder();

  var hh = new _historyHash2.default();
  var hh2 = hh.merge({ foo: 'bar' });
  t.is(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(hh2, 'arguments/0/object/object').hash, 'arguments/0/object').foo, 'arguments/0'), {
    content: 't.is(hh2.hash.foo, \'bar\')',
    filepath: 'test/support/history-hash-test.js',
    line: 30
  }), 'bar');
});

(0, _ava2.default)('should accept hash and preserve existing params', function (t) {
  var _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder(),
      _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder();

  var hh = new _historyHash2.default({
    history: ['bar', 'foo'],
    hash: { foo: 11, bar: 22 }
  });
  var hh2 = hh.merge({ foo: 111 });
  t.deepEqual(_rec3._expr(_rec3._capt(_rec3._capt(hh2, 'arguments/0/object').hash, 'arguments/0'), {
    content: 't.deepEqual(hh2.hash, { foo: 111, bar: 22 })',
    filepath: 'test/support/history-hash-test.js',
    line: 39
  }), _rec4._expr(_rec4._capt({ foo: 111, bar: 22 }, 'arguments/1'), {
    content: 't.deepEqual(hh2.hash, { foo: 111, bar: 22 })',
    filepath: 'test/support/history-hash-test.js',
    line: 39
  }));
  t.deepEqual(_rec5._expr(_rec5._capt(_rec5._capt(hh2, 'arguments/0/object').history, 'arguments/0'), {
    content: 't.deepEqual(hh2.history, [\'bar\', \'foo\'])',
    filepath: 'test/support/history-hash-test.js',
    line: 40
  }), _rec6._expr(_rec6._capt(['bar', 'foo'], 'arguments/1'), {
    content: 't.deepEqual(hh2.history, [\'bar\', \'foo\'])',
    filepath: 'test/support/history-hash-test.js',
    line: 40
  }));
});

(0, _ava2.default)('should remove old elements from hash and history', function (t) {
  var _rec7 = new _powerAssertRecorder(),
      _rec8 = new _powerAssertRecorder(),
      _rec9 = new _powerAssertRecorder(),
      _rec10 = new _powerAssertRecorder();

  var hh = new _historyHash2.default({
    capacity: 2,
    history: ['b', 'a'], // b is the oldest
    hash: { a: 1, b: 2 }
  });
  var hh2 = hh.merge({ c: 3 });
  t.deepEqual(_rec7._expr(_rec7._capt(_rec7._capt(hh2, 'arguments/0/object').hash, 'arguments/0'), {
    content: 't.deepEqual(hh2.hash, { a: 1, c: 3 })',
    filepath: 'test/support/history-hash-test.js',
    line: 50
  }), _rec8._expr(_rec8._capt({ a: 1, c: 3 }, 'arguments/1'), {
    content: 't.deepEqual(hh2.hash, { a: 1, c: 3 })',
    filepath: 'test/support/history-hash-test.js',
    line: 50
  }));
  t.deepEqual(_rec9._expr(_rec9._capt(_rec9._capt(hh2, 'arguments/0/object').history, 'arguments/0'), {
    content: 't.deepEqual(hh2.history, [\'a\', \'c\'])',
    filepath: 'test/support/history-hash-test.js',
    line: 51
  }), _rec10._expr(_rec10._capt(['a', 'c'], 'arguments/1'), {
    content: 't.deepEqual(hh2.history, [\'a\', \'c\'])',
    filepath: 'test/support/history-hash-test.js',
    line: 51
  }));
});

(0, _ava2.default)('should add params up to capacity', function (t) {
  var _rec11 = new _powerAssertRecorder(),
      _rec12 = new _powerAssertRecorder(),
      _rec13 = new _powerAssertRecorder();

  var hh = new _historyHash2.default({
    capacity: 4,
    history: ['b', 'a'],
    hash: { a: 1, b: 2 }
  });
  var hh2 = hh.merge({ c: 3, d: 4, e: 5 });
  t.deepEqual(_rec11._expr(_rec11._capt(_rec11._capt(hh2, 'arguments/0/object').hash, 'arguments/0'), {
    content: 't.deepEqual(hh2.hash, { a: 1, c: 3, d: 4, e: 5 })',
    filepath: 'test/support/history-hash-test.js',
    line: 61
  }), _rec12._expr(_rec12._capt({ a: 1, c: 3, d: 4, e: 5 }, 'arguments/1'), {
    content: 't.deepEqual(hh2.hash, { a: 1, c: 3, d: 4, e: 5 })',
    filepath: 'test/support/history-hash-test.js',
    line: 61
  }));
  t.deepEqual(_rec13._expr(_rec13._capt(_rec13._capt(_rec13._capt(hh2, 'arguments/0/object/object').history, 'arguments/0/object')[0], 'arguments/0'), {
    content: 't.deepEqual(hh2.history[0], \'a\')',
    filepath: 'test/support/history-hash-test.js',
    line: 62
  }), 'a');
});

(0, _ava2.default)('should not mutate existing object', function (t) {
  var _rec14 = new _powerAssertRecorder(),
      _rec15 = new _powerAssertRecorder();

  var hh = new _historyHash2.default({
    capacity: 4,
    history: ['b', 'a'],
    hash: { a: 1, b: 2 }
  });
  hh.merge({ c: 3, d: 4, e: 5 });
  t.deepEqual(_rec14._expr(_rec14._capt(hh, 'arguments/0'), {
    content: 't.deepEqual(hh, { capacity: 4, history: [\'b\', \'a\'], hash: { a: 1, b: 2 } })',
    filepath: 'test/support/history-hash-test.js',
    line: 72
  }), _rec15._expr(_rec15._capt({ capacity: 4, history: _rec15._capt(['b', 'a'], 'arguments/1/properties/1/value'), hash: _rec15._capt({ a: 1, b: 2 }, 'arguments/1/properties/2/value') }, 'arguments/1'), {
    content: 't.deepEqual(hh, { capacity: 4, history: [\'b\', \'a\'], hash: { a: 1, b: 2 } })',
    filepath: 'test/support/history-hash-test.js',
    line: 72
  }));
});
//# sourceMappingURL=../../node_modules/.cache/ava/9f7d99df9790d2b48d30ff886b3c6e77.js.map