{"version":3,"sources":["request-phone-response-handler-test.js"],"names":["args","response","t","pass","user","platformId","h","api","sendMessage","sinon","stub","returns","catch","call","fail","truthy","calledWith","disable_notification","reply_markup","stringify","keyboard","text","request_contact","one_time_keyboard","message"],"mappings":";;weAAA;;;;;;;;;;;;;;;;;;AAkBA;AAEkH;;;AADlH;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,4BAAiB,UAAjB,EAA6B,UAACA,IAAD,EAAU;AAAE,4CAAgCA,IAAhC;AAAwC,CAAjF;;AAEA,mBAAK,4CAAL,EAAmD,aAAK;AACtD,4CAAgC,EAAEC,UAAU,EAAZ,EAAhC;AACAC,IAAEC,IAAF;AACD,CAHD;;AAKA,mBAAK,yBAAL,EAAgC,aAAK;AAAA;;AACnC,MAAMC,OAAO,EAAEC,YAAY,KAAd,EAAb;AACA,MAAMC,IAAI,0CAAgC,EAAEL,UAAU,EAAZ,EAAgBG,UAAhB,EAAhC,CAAV;AACAE,IAAEC,GAAF,GAAQ,EAAEC,aAAa,gBAAGC,KAAH,CAASC,IAAT,GAAgBC,OAAhB,CAAwB,EAAEC,OAAO,kBAAM,CAAE,CAAjB,EAAxB,CAAf,EAAR;AACAN,IAAEO,IAAF,CAAO;AAAA,WAAMX,EAAEY,IAAF,EAAN;AAAA,GAAP,EAJmC,CAIX;AACxBZ,IAAEa,MAAF,uBAAS,+EAAER,GAAF,sCAAMC,WAAN,+BAAkBQ,UAAlB,CAA6B,KAA7B,EAAoC,0CAApC,aACP;AACEC,0BAAsB,IADxB;AAEEC,6BACE,6EAAKC,SAAL,YAAe;AACbC,2BAAU,YAAC,YAAC,EAAEC,MAAM,aAAR,EAAuBC,iBAAiB,IAAxC,EAAD,qGAAD,0FAAV,8EADa;AAEbC,yBAAmB;AAFN,KAAf,4DADF;AAFF,GADO,6BAAT;AAAA;AAAA;AAAA;AAAA;AASD,CAdD;;AAgBA,mBAAK,6CAAL,EAAoD,aAAK;AAAA;;AACvD,MAAMnB,OAAO,EAAEC,YAAY,KAAd,EAAb;AACA,MAAMC,IAAI,0CAAgC,EAAEL,UAAU,EAAEuB,SAAS,KAAX,EAAZ,EAAgCpB,UAAhC,EAAhC,CAAV;AACAE,IAAEC,GAAF,GAAQ,EAAEC,aAAa,gBAAGC,KAAH,CAASC,IAAT,GAAgBC,OAAhB,CAAwB,EAAEC,OAAO,kBAAM,CAAE,CAAjB,EAAxB,CAAf,EAAR;AACAN,IAAEO,IAAF,CAAO;AAAA,WAAMX,EAAEY,IAAF,EAAN;AAAA,GAAP,EAJuD,CAI/B;AACxBZ,IAAEa,MAAF,yBAAS,kFAAER,GAAF,sCAAMC,WAAN,+BAAkBQ,UAAlB,CAA6B,KAA7B,EAAoC,KAApC,cACP;AACEC,0BAAsB,IADxB;AAEEC,8BACE,8EAAKC,SAAL,aAAe;AACbC,4BAAU,aAAC,aAAC,EAAEC,MAAM,aAAR,EAAuBC,iBAAiB,IAAxC,EAAD,qGAAD,0FAAV,8EADa;AAEbC,yBAAmB;AAFN,KAAf,4DADF;AAFF,GADO,6BAAT;AAAA;AAAA;AAAA;AAAA;AASD,CAdD","file":"request-phone-response-handler-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new, no-console */\nimport test from 'ava';\nimport RequestPhoneResponseHandler from '../../../src/response-handlers/telegram/request-phone-response-handler'; // eslint-disable-line max-len\nimport checkNotNullTest from '../../helpers/check-not-null.js';\nimport { ss } from '../../spec-support';\n\ncheckNotNullTest('response', (args) => { new RequestPhoneResponseHandler(args); });\n\ntest('can be constructed with default parameters', t => {\n  new RequestPhoneResponseHandler({ response: {} });\n  t.pass();\n});\n\ntest('should call sendMessage', t => {\n  const user = { platformId: 31337 };\n  const h = new RequestPhoneResponseHandler({ response: {}, user });\n  h.api = { sendMessage: ss.sinon.stub().returns({ catch: () => {} }) };\n  h.call(() => t.fail()); // and should not call onResult\n  t.truthy(h.api.sendMessage.calledWith(31337, 'Send number by clicking the button below',\n    {\n      disable_notification: true,\n      reply_markup:\n        JSON.stringify({\n          keyboard: [[{ text: 'Send number', request_contact: true }]],\n          one_time_keyboard: true,\n        }),\n    }));\n});\n\ntest('should call sendMessage with custom message', t => {\n  const user = { platformId: 31337 };\n  const h = new RequestPhoneResponseHandler({ response: { message: 'foo' }, user });\n  h.api = { sendMessage: ss.sinon.stub().returns({ catch: () => {} }) };\n  h.call(() => t.fail()); // and should not call onResult\n  t.truthy(h.api.sendMessage.calledWith(31337, 'foo',\n    {\n      disable_notification: true,\n      reply_markup:\n        JSON.stringify({\n          keyboard: [[{ text: 'Send number', request_contact: true }]],\n          one_time_keyboard: true,\n        }),\n    }));\n});\n"]}