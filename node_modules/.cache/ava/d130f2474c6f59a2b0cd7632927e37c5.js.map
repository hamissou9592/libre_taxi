{"version":3,"sources":["props-equal-test.js"],"names":["t","pass","c","foo","baz","is","call","foo1","a","b"],"mappings":";;weAAA;;;;;;;;;;;;;;;;;;AAkBA;;;AACA;;;;AACA;;;;;;AAEA,mBAAK,4CAAL,EAAmD,aAAK;AACtD,2BAAe,EAAf,EAAmB,EAAnB;AACAA,IAAEC,IAAF;AACD,CAHD;;AAKA,mBAAK,2CAAL,EAAkD,aAAK;AAAA;;AACrD,MAAMC,IAAI,yBAAe,EAAEC,KAAK,KAAP,EAAf,EAA+B,EAAEC,KAAK,KAAP,EAAcD,KAAK,KAAnB,EAA/B,CAAV;AACAH,IAAEK,EAAF,uBAAK,2CAAEC,IAAF,EAAL;AAAA;AAAA;AAAA;AAAA,MAAe,IAAf;AACD,CAHD;;AAKA,mBAAK,8CAAL,EAAqD,aAAK;AAAA;;AACxD,MAAMJ,IAAI,yBAAe,EAAEK,MAAM,MAAR,EAAf,EAAiC,EAAEH,KAAK,KAAP,EAAcD,KAAK,KAAnB,EAAjC,CAAV;AACAH,IAAEK,EAAF,yBAAK,4CAAEC,IAAF,EAAL;AAAA;AAAA;AAAA;AAAA,MAAe,KAAf;AACD,CAHD;;AAKA,mBAAK,+BAAL,EAAsC,aAAK;AAAA;;AACzC,MAAMJ,IAAI,yBAAe,EAAEM,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAf,EAA+B,EAAEP,GAAG,CAAL,EAAQO,GAAG,CAAX,EAAcD,GAAG,CAAjB,EAA/B,CAAV;AACAR,IAAEK,EAAF,yBAAK,4CAAEC,IAAF,EAAL;AAAA;AAAA;AAAA;AAAA,MAAe,IAAf;AACD,CAHD","file":"props-equal-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new */\nimport test from 'ava';\nimport PropsEqual from '../../src/conditions/props-equal';\n\ntest('can be constructed with default parameters', t => {\n  new PropsEqual({}, {});\n  t.pass();\n});\n\ntest('should be truthy when fragment is present', t => {\n  const c = new PropsEqual({ foo: 'bar' }, { baz: 'qux', foo: 'bar' });\n  t.is(c.call(), true);\n});\n\ntest('should be falsy when fragment is not present', t => {\n  const c = new PropsEqual({ foo1: 'bar1' }, { baz: 'qux', foo: 'bar' });\n  t.is(c.call(), false);\n});\n\ntest('should support multiple props', t => {\n  const c = new PropsEqual({ a: 1, b: 2 }, { c: 3, b: 2, a: 1 });\n  t.is(c.call(), true);\n});\n"]}