{"version":3,"sources":["select-user-type-test.js"],"names":["user","i18n","t","pass","action","response","get","is","type","responses","message","__","rows","value","post","condition","deepEqual","arr","ok","state","userType","path","err"],"mappings":"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","file":"select-user-type-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new, no-unused-vars */\nimport test from 'ava';\nimport routes from '../../src/routes'; // to aviod circular dependencies\nimport SelectUserType from '../../src/actions/menu/select-user-type';\nimport { i18n } from '../spec-support';\n\nconst user = {};\n\ntest('can be constructed with default parameters', t => {\n  new SelectUserType({ i18n, user });\n  t.pass();\n});\n\ntest('should return composite response on get', t => {\n  const action = new SelectUserType({ i18n, user });\n  const response = action.get();\n  t.is(response.type, 'composite');\n  t.is(response.responses[0].type, 'text');\n  t.is(response.responses[0].message, i18n.__('select-user-type.who_you_are'));\n  t.is(response.responses[1].type, 'options');\n  t.is(response.responses[1].rows[0][0].value, 'driver');\n  t.is(response.responses[1].rows[1][0].value, 'passenger');\n});\n\ntest('should return composite response on post', t => {\n  const action = new SelectUserType({ i18n, user });\n  const response = action.post('driver');\n  t.is(response.type, 'if');\n  t.is(response.condition.type, 'in');\n  t.is(response.condition.value, 'driver');\n  t.deepEqual(response.condition.arr, ['driver', 'passenger']);\n  t.is(response.ok.type, 'composite');\n  t.is(response.ok.responses[0].type, 'user-state');\n  t.is(response.ok.responses[0].state.userType, 'driver');\n  t.is(response.ok.responses[1].type, 'text');\n  t.is(response.ok.responses[1].message, 'ðŸ‘Œ OK!');\n  t.is(response.ok.responses[2].type, 'redirect');\n  t.is(response.ok.responses[2].path, 'request-phone');\n  t.is(response.err.type, 'error');\n  t.is(response.err.message, i18n.__('global.error_try_again'));\n});\n"]}