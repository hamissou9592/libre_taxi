{"version":3,"sources":["stateful-test.js"],"names":["STATEFUL_CONNSTR","STATEFUL_CREDENTIALS_FILE","undefined","server","before","demo","test_state_key","foo","bar","another_key","after","always","close","cb","t","plan","checkAnother","load","then","state","is","end","catch","err","fail","truthy","callback","x","save","verify","y","setTimeout","setState","prop1","prop2","interval","setInterval","clearInterval","update","dispose","pass"],"mappings":"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","file":"stateful-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport test from 'ava';\nimport FirebaseServer from 'firebase-server';\nimport Demo from './stateful-demo';\nimport { overrideSettings } from '../src/firebase-db';\n\noverrideSettings({\n  STATEFUL_CONNSTR: 'ws://localhost.firebaseio.test:5000',\n  STATEFUL_CREDENTIALS_FILE: undefined,\n});\n\nlet server = null;\n\ntest.before(() => {\n  server = new FirebaseServer(5000, 'localhost.firebaseio.test', {\n    demo: {\n      test_state_key: { foo: 1, bar: 2 },\n      another_key: { foo: 11, bar: 22 },\n    },\n  });\n});\n\ntest.after.always('guaranteed cleanup', () => {\n  server.close();\n});\n\ntest.cb('should load initial state from storage', t => {\n  t.plan(4);\n\n  const checkAnother = () => {\n    new Demo('another_key').load().then((demo) => {\n      const state = demo.state;\n      t.is(state.foo, 11);\n      t.is(state.bar, 22);\n      t.end();\n    })\n    .catch((err) => {\n      t.fail(`ERR2: ${err}`);\n    });\n  };\n\n  new Demo('test_state_key').load().then((demo) => {\n    const state = demo.state;\n    t.is(state.foo, 1);\n    t.is(state.bar, 2);\n    checkAnother();\n  })\n  .catch((err) => {\n    t.fail(`ERR1: ${err}`);\n  });\n});\n\ntest.cb('should have state if key not exists', t => {\n  t.plan(1);\n  new Demo('non_existing_key').load().then((demo) => {\n    t.truthy(demo.state);\n    t.end();\n  })\n  .catch((err) => {\n    t.fail(`ERR3: ${err}`);\n  });\n});\n\ntest.cb('should save state and execute callback', t => {\n  t.plan(1);\n\n  // to be executed on save (\"line A\" below)\n  const callback = () => {\n    new Demo('test_state_key').load().then((demo) => {\n      t.is(demo.state.x, 3);\n      t.end();\n    })\n    .catch((err) => {\n      t.fail(`ERR4: ${err}`);\n    });\n  };\n\n  new Demo('test_state_key').load().then((demo) => {\n    const state = demo.state;\n    state.x = 3;\n    demo.save(callback); // line A\n  })\n  .catch((err) => {\n    t.fail(`ERR5: ${err}`);\n  });\n});\n\ntest.cb('should save state without callback', t => {\n  t.plan(1);\n\n  // to be executed after save (\"line B\" below)\n  const verify = () => {\n    new Demo('test_state_key').load().then((demo) => {\n      t.is(demo.state.y, 4);\n      t.end();\n    })\n    .catch((err) => {\n      t.fail(`ERR6: ${err}`);\n    });\n  };\n\n  new Demo('test_state_key').load().then((demo) => {\n    const state = demo.state;\n    state.y = 4;\n    demo.save();\n\n    setTimeout(verify, 300); // line B\n  })\n  .catch((err) => {\n    t.fail(`ERR7: ${err}`);\n  });\n});\n\ntest.cb('should update state values', t => {\n  t.plan(3);\n\n  new Demo('test_state_key').load().then((demo) => {\n    demo.setState({\n      prop1: 1,\n      prop2: 2,\n    });\n    t.is(demo.state.prop1, 1);\n    t.is(demo.state.prop2, 2);\n    t.is(demo.state.foo, 1); // should not affect existing data\n    t.end();\n  })\n  .catch((err) => {\n    t.fail(`ERR8: ${err}`);\n  });\n});\n\ntest.cb('should sync values between two storages with the same key', t => {\n  t.plan(1);\n\n  new Demo('must_sync').load().then((demo) => {\n    const interval = setInterval(() => {\n      if (demo.state.foo) {\n        clearInterval(interval);\n        t.is(demo.state.foo, 123);\n        t.end();\n      }\n    }, 100);\n  })\n  .catch((err) => {\n    t.fail(`ERR9: ${err}`);\n  });\n\n  new Demo('must_sync').load().then((demo) => {\n    const state = demo.state;\n    state.foo = 123;\n    demo.save();\n  })\n  .catch((err) => {\n    t.fail(`ERR10: ${err}`);\n  });\n});\n\ntest.cb('should not sync values when disposed', t => {\n  // update procedure, to be executed on \"line C\" below.\n  const update = () => {\n    new Demo('should_not_sync').load().then((demo) => {\n      const state = demo.state;\n      state.foo = 123;\n      demo.save();\n    })\n    .catch((err) => {\n      t.fail(`ERR11: ${err}`);\n    });\n  };\n\n  new Demo('should_not_sync').load().then((demo) => {\n    demo.dispose(); // dispose current\n    update(); // line C. run procedure that updates storage with the same key\n\n    // check every 100 ms, fail if updated\n    const interval = setInterval(() => {\n      if (demo.state.foo) {\n        t.fail();\n      }\n    }, 100);\n\n    // after one second consider it's passed, clear interval\n    setTimeout(() => {\n      clearInterval(interval);\n      t.pass();\n      t.end();\n    }, 1000);\n  })\n  .catch((err) => {\n    t.fail(`ERR12: ${err}`);\n  });\n});\n"]}