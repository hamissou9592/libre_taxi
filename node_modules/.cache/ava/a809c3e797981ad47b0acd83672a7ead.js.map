{"version":3,"sources":["condition-test.js"],"names":["args","c","type","t","is","cb","err","throws","call","end"],"mappings":";;;;;;weAAA;;;;;;;;;;;;;;;;;;AAkBA;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,4BAAiB,MAAjB,EAAyB,UAACA,IAAD,EAAU;AAAE,0BAAcA,IAAd;AAAsB,CAA3D;;AAEA,mBAAK,4CAAL,EAAmD,aAAK;AAAA;;AACtD;AACA,MAAMC,IAAI,wBAAc,EAAEC,MAAM,KAAR,EAAd,CAAV;AACAC,IAAEC,EAAF,uBAAK,oCAAEF,IAAP;AAAA;AAAA;AAAA;AAAA,MAAa,KAAb;AACD,CAJD;;AAMA,cAAKG,EAAL,CAAQ,6CAAR,EAAuD,aAAK;AAC1D,MAAMC,MAAM,iBAAZ;AACA,MAAML,IAAI,wBAAc,EAAEC,MAAM,KAAR,EAAd,CAAV;AACAC,IAAEI,MAAF;AAAA,WAAS,YAAM;AAAEN,QAAEO,IAAF;AAAW,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA8BF,GAA9B;AACAH,IAAEM,GAAF;AACD,CALD","file":"condition-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new */\nimport test from 'ava';\nimport Condition from '../../src/conditions/condition';\nimport checkNotNullTest from '../helpers/check-not-null.js';\n\ncheckNotNullTest('type', (args) => { new Condition(args); });\n\ntest('can be constructed with default parameters', t => {\n  // however, it's abstract class\n  const c = new Condition({ type: 'foo' });\n  t.is(c.type, 'foo');\n});\n\ntest.cb('should throw error when for missing methods', t => {\n  const err = 'not implemented';\n  const c = new Condition({ type: 'foo' });\n  t.throws(() => { c.call(); }, err);\n  t.end();\n});\n"]}