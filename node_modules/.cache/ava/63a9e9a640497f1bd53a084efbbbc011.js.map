{"version":3,"sources":["i18n-test.js"],"names":["NUM_OF_LOCALIZATIONS","cb","t","plan","walker","walk","followLinks","en","require","on","root","stat","next","name","path","xx","key","length","fail","endsWith","pass","end","startsWith","tmp","createReadStream","node","v","k","done","tree","includes"],"mappings":"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","file":"i18n-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport test from 'ava';\nimport walk from 'walk';\nimport oboe from 'oboe';\nimport fs from 'fs';\n\nconst NUM_OF_LOCALIZATIONS = 22;\n\ntest.cb('locales should have all keys from en.json, except *_desc', t => {\n  t.plan(NUM_OF_LOCALIZATIONS - 1);\n\n  const walker = walk.walk('../locales', { followLinks: false });\n  const en = require('../locales/en.json'); // eslint-disable-line global-require\n\n  // walk through each file, except en.json\n  walker.on('file', (root, stat, next) => {\n    if (stat.name !== 'en.json') {\n      const path = `${root}/${stat.name}`;\n      const xx = require(path); // eslint-disable-line global-require\n\n      for (const key of Object.keys(xx)) {\n        if (xx[key].length === 0) t.fail(`Value length for key '${key}' in ${stat.name} is 0`);\n        if (!en[key]) t.fail(`Key '${key}' from '${stat.name}' was not found in en.json`);\n      }\n\n      for (const key of Object.keys(en)) {\n        if (key.endsWith('_desc')) continue;\n        if (!xx[key]) t.fail(`Key '${key}' exists in en.json, but not in ${stat.name}`);\n      }\n\n      t.pass();\n    }\n\n    next();\n  });\n\n  walker.on('end', () => {\n    t.end();\n  });\n});\n\ntest('en.json should have corresponding *_desc keys', t => {\n  const en = require('../locales/en.json'); // eslint-disable-line global-require\n\n  for (const key of Object.keys(en)) {\n    if (key.endsWith('_desc')) continue;\n    if (key.startsWith('__') && key.endsWith('__')) continue; // skip __it__\n\n    if (!en[`${key}_desc`]) t.fail(`en.json has '${key}', but should also have '${key}_desc'`);\n  }\n\n  t.pass();\n});\n\ntest.cb('locales except en.json should not have keys ending with _desc', t => {\n  t.plan(NUM_OF_LOCALIZATIONS - 1);\n\n  const walker = walk.walk('../locales', { followLinks: false });\n\n  // walk through each file, except en.json\n  walker.on('file', (root, stat, next) => {\n    if (stat.name !== 'en.json') {\n      const path = `${root}/${stat.name}`;\n      const xx = require(path); // eslint-disable-line global-require\n\n      for (const key of Object.keys(xx)) {\n        if (key.endsWith('_desc')) {\n          t.fail(`'${stat.name}' cannot contani keys ending with '_desc', but '${key}' was found.`);\n        }\n      }\n\n      t.pass();\n    }\n\n    next();\n  });\n\n  walker.on('end', () => {\n    t.end();\n  });\n});\n\ntest.cb('locales should not have duplicates in them', t => {\n  t.plan(NUM_OF_LOCALIZATIONS);\n\n  let tmp = {};\n  const walker = walk.walk('../locales', { followLinks: false });\n\n  // walk through each file, except en.json\n  walker.on('file', (root, stat, next) => {\n    const path = `${root}/${stat.name}`;\n\n    oboe(fs.createReadStream(path))\n      .node('*', (v, k) => {\n        if (!tmp[k]) {\n          tmp[k] = 1;\n        } else {\n          t.fail(`Duplicate key '${k}' found in ${stat.name}`);\n        }\n      })\n      .done((tree) => {\n        tmp = {};\n        if (Object.keys(tree).length > 0) { t.pass(); } else { t.fail(); }\n        next();\n      });\n  });\n\n  walker.on('end', () => {\n    t.end();\n  });\n});\n\ntest.cb('locales should not have long keys with {{phone}}', t => {\n  // The reason for that is how Telegram handles big messages. If the message\n  // is more than 200 characters, phone number is not highlighted.\n  // See details here: https://github.com/ro31337/libretaxi/issues/366\n\n  t.plan(NUM_OF_LOCALIZATIONS);\n  const walker = walk.walk('../locales', { followLinks: false });\n\n  // walk through each file, except en.json\n  walker.on('file', (root, stat, next) => {\n    const path = `${root}/${stat.name}`;\n\n    oboe(fs.createReadStream(path))\n      .node('*', (v, k) => {\n        if (typeof v === 'string' && v.includes('{{phone}}') && v.length > 150) {\n          t.fail(`[${stat.name}] \"${k}\" value length is ${v.length}, max recommended is 150`);\n        }\n      })\n      .done((tree) => {\n        if (Object.keys(tree).length > 0) { t.pass(); } else { t.fail(); }\n        next();\n      });\n  });\n\n  walker.on('end', () => {\n    t.end();\n  });\n});\n"]}