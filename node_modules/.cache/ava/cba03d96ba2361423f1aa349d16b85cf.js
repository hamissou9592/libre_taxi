'use strict';

var _assign = require('/home/hamissou/Bureau/libretaxi-master/node_modules/babel-runtime/core-js/object/assign.js');

var _assign2 = _interopRequireDefault(_assign);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LibreTaxi, free and open source ride sharing platform.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Copyright (C) 2016-2017  Roman Pushkin
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            it under the terms of the GNU Affero General Public License as
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            published by the Free Software Foundation, either version 3 of the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            but WITHOUT ANY WARRANTY; without even the implied warranty of
or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GNU Affero General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            You should have received a copy of the GNU Affero General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        */

/* eslint-disable no-new */
// failing test(s)? possible reason - we override queue, but these tests can run in parallel.


var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _queue = require('../../src/queue/queue');

var _queue2 = _interopRequireDefault(_queue);

var _specSupport = require('../spec-support');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _checkNotNull = require('../helpers/check-not-null.js');

var _checkNotNull2 = _interopRequireDefault(_checkNotNull);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _checkNotNull2.default)('type', function (args) {
  new _queue2.default(args);
});

(0, _ava2.default)('should create message on create', function (t) {
  var _rec = new _powerAssertRecorder(),
      _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder();

  // arrange
  var myQueue = {};
  var create = _specSupport.ss.sinon.stub().returns(myQueue);
  var removeOnComplete = _specSupport.ss.sinon.stub().returns(myQueue);
  var save = _specSupport.ss.sinon.stub().returns(myQueue);
  (0, _assign2.default)(myQueue, { create: create, removeOnComplete: removeOnComplete, save: save });
  var queue = new _queue2.default({ type: 'test-queue-type1', queue: myQueue });

  // act
  queue.create({ foo1: 'bar1' });

  // assert
  t.truthy(_rec._expr(_rec._capt(_rec._capt(create, 'arguments/0/callee/object').calledWith('test-queue-type1', _rec._capt({ foo1: 'bar1' }, 'arguments/0/arguments/1')), 'arguments/0'), {
    content: 't.truthy(create.calledWith(\'test-queue-type1\', { foo1: \'bar1\' }))',
    filepath: 'test/queue/queue-test.js',
    line: 42
  }));
  t.truthy(_rec2._expr(_rec2._capt(_rec2._capt(removeOnComplete, 'arguments/0/callee/object').calledWith(true), 'arguments/0'), {
    content: 't.truthy(removeOnComplete.calledWith(true))',
    filepath: 'test/queue/queue-test.js',
    line: 43
  }));
  t.truthy(_rec3._expr(_rec3._capt(_rec3._capt(save, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.truthy(save.calledWith())',
    filepath: 'test/queue/queue-test.js',
    line: 44
  }));
  _sinon2.default.assert.callOrder(create, removeOnComplete, save);
});

(0, _ava2.default)('should create delayed message on createDelayed', function (t) {
  var _rec4 = new _powerAssertRecorder(),
      _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder(),
      _rec7 = new _powerAssertRecorder();

  // arrange
  var myQueue = {};
  var create = _specSupport.ss.sinon.stub().returns(myQueue);
  var delay = _specSupport.ss.sinon.stub().returns(myQueue);
  var removeOnComplete = _specSupport.ss.sinon.stub().returns(myQueue);
  var save = _specSupport.ss.sinon.stub().returns(myQueue);
  (0, _assign2.default)(myQueue, { create: create, delay: delay, removeOnComplete: removeOnComplete, save: save });
  var queue = new _queue2.default({ type: 'test-queue-type2', queue: myQueue });

  // act
  queue.createDelayed({ foo2: 'bar2' });

  // assert
  t.truthy(_rec4._expr(_rec4._capt(_rec4._capt(create, 'arguments/0/callee/object').calledWith('test-queue-type2', _rec4._capt({ foo2: 'bar2' }, 'arguments/0/arguments/1')), 'arguments/0'), {
    content: 't.truthy(create.calledWith(\'test-queue-type2\', { foo2: \'bar2\' }))',
    filepath: 'test/queue/queue-test.js',
    line: 62
  }));
  t.truthy(_rec5._expr(_rec5._capt(_rec5._capt(delay, 'arguments/0/callee/object').calledWith(1000), 'arguments/0'), {
    content: 't.truthy(delay.calledWith(1000))',
    filepath: 'test/queue/queue-test.js',
    line: 63
  }));
  t.truthy(_rec6._expr(_rec6._capt(_rec6._capt(removeOnComplete, 'arguments/0/callee/object').calledWith(true), 'arguments/0'), {
    content: 't.truthy(removeOnComplete.calledWith(true))',
    filepath: 'test/queue/queue-test.js',
    line: 64
  }));
  t.truthy(_rec7._expr(_rec7._capt(_rec7._capt(save, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.truthy(save.calledWith())',
    filepath: 'test/queue/queue-test.js',
    line: 65
  }));
  _sinon2.default.assert.callOrder(create, delay, removeOnComplete, save);
});

(0, _ava2.default)('should process \'call-action\' messages', function (t) {
  var _rec8 = new _powerAssertRecorder();

  // arrange
  var myQueue = { process: _specSupport.ss.sinon.stub() };
  var queue = new _queue2.default({ type: 'test-queue-type3', queue: myQueue });

  // act
  queue.process({ foo3: 'bar3' });

  // assert
  t.truthy(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(myQueue, 'arguments/0/callee/object/object').process, 'arguments/0/callee/object').calledWith('test-queue-type3', 20, _rec8._capt({ foo3: 'bar3' }, 'arguments/0/arguments/2')), 'arguments/0'), {
    content: 't.truthy(myQueue.process.calledWith(\'test-queue-type3\', 20, { foo3: \'bar3\' }))',
    filepath: 'test/queue/queue-test.js',
    line: 78
  }));
});

(0, _ava2.default)('should create delayed message with custom delay on createDelayed', function (t) {
  var _rec9 = new _powerAssertRecorder(),
      _rec10 = new _powerAssertRecorder(),
      _rec11 = new _powerAssertRecorder(),
      _rec12 = new _powerAssertRecorder();

  // arrange
  var myQueue = {};
  var create = _specSupport.ss.sinon.stub().returns(myQueue);
  var delay = _specSupport.ss.sinon.stub().returns(myQueue);
  var removeOnComplete = _specSupport.ss.sinon.stub().returns(myQueue);
  var save = _specSupport.ss.sinon.stub().returns(myQueue);
  (0, _assign2.default)(myQueue, { create: create, delay: delay, removeOnComplete: removeOnComplete, save: save });
  var queue = new _queue2.default({ type: 'test-queue-type2', queue: myQueue });

  // act
  queue.createDelayed({ foo2: 'bar2' }, 31337);

  // assert
  t.truthy(_rec9._expr(_rec9._capt(_rec9._capt(create, 'arguments/0/callee/object').calledWith('test-queue-type2', _rec9._capt({ foo2: 'bar2' }, 'arguments/0/arguments/1')), 'arguments/0'), {
    content: 't.truthy(create.calledWith(\'test-queue-type2\', { foo2: \'bar2\' }))',
    filepath: 'test/queue/queue-test.js',
    line: 95
  }));
  t.truthy(_rec10._expr(_rec10._capt(_rec10._capt(delay, 'arguments/0/callee/object').calledWith(31337), 'arguments/0'), {
    content: 't.truthy(delay.calledWith(31337))',
    filepath: 'test/queue/queue-test.js',
    line: 96
  }));
  t.truthy(_rec11._expr(_rec11._capt(_rec11._capt(removeOnComplete, 'arguments/0/callee/object').calledWith(true), 'arguments/0'), {
    content: 't.truthy(removeOnComplete.calledWith(true))',
    filepath: 'test/queue/queue-test.js',
    line: 97
  }));
  t.truthy(_rec12._expr(_rec12._capt(_rec12._capt(save, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.truthy(save.calledWith())',
    filepath: 'test/queue/queue-test.js',
    line: 98
  }));
  _sinon2.default.assert.callOrder(create, delay, removeOnComplete, save);
});
//# sourceMappingURL=../../node_modules/.cache/ava/cba03d96ba2361423f1aa349d16b85cf.js.map