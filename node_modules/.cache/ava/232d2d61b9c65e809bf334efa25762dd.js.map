{"version":3,"sources":["request-location-response-handler-test.js"],"names":["args","responseObject","response","t","pass","cb","lib","prompt","sinon","stub","returns","resolve","value","h","assert","resultValue","is","truthy","calledWith","type","name","message","choices","end","call","err","reject","actualMessage","expectedMessage","console","log","tmp"],"mappings":";;;;;;weAAA;;;;;;;;;;;;;;;;;;AAkBA;AAEmH;;;AADnH;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,4BAAiB,UAAjB,EAA6B,UAACA,IAAD,EAAU;AAAE,+CAAmCA,IAAnC;AAA2C,CAApF;;AAEA,IAAMC,iBAAiB,uCAAvB;;AAEA,mBAAK,4CAAL,EAAmD,aAAK;AACtD,+CAAmC,EAAEC,UAAU,EAAZ,EAAnC;AACAC,IAAEC,IAAF;AACD,CAHD;;AAKA,cAAKC,EAAL,CAAQ,gDAAR,EAA0D,aAAK;AAC7D;AACA,MAAMC,MAAM;AACVC,YAAQ,gBAAGC,KAAH,CAASC,IAAT,GAAgBC,OAAhB,CACJ,sBAAY,UAACC,OAAD,EAAa;AACvBA,cAAQ,EAAEC,OAAO,GAAT,EAAR;AACD,KAFD,CADI;AADE,GAAZ;AAOA,MAAMC,IAAI,6CAAmC;AAC3CX,cAAUD,cADiC;AAE3CK,YAF2C,CAEtC;AAFsC,GAAnC,CAAV;;AAKA;AACA,MAAMQ,SAAS,SAATA,MAAS,CAACC,WAAD,EAAiB;AAAA;AAAA;;AAC9BZ,MAAEa,EAAF,uBAAKD,WAAL;AAAA;AAAA;AAAA;AAAA,QAAkB,GAAlB;AACAZ,MAAEc,MAAF,yBAAS,iEAAIV,MAAJ,+BAAWW,UAAX,aAAsB,aAC7B;AACEC,YAAM,MADR;AAEEC,YAAM,OAFR;AAGEC,eAAS,cAHX;AAIEC,2BAAS,aACP,EAAEF,MAAM,oBAAR,EAA8BR,mBAAO,CAAC,SAAD,cAAY,CAAC,UAAb,oGAAP,wFAA9B,EADO,mFAEP,EAAEQ,MAAM,0BAAR,EAAoCR,mBAAO,CAAC,SAAD,cAAY,CAAC,UAAb,oGAAP,wFAApC,EAFO,mFAGP,EAAEQ,MAAM,kCAAR,EAA4CR,mBAAO,CAAC,SAAD,cAAY,CAAC,UAAb,oGAAP,wFAA5C,EAHO,mFAIP,EAAEQ,MAAM,qBAAR,EAA+BR,mBAAO,CAAC,SAAD,cAAY,CAAC,UAAb,oGAAP,wFAA/B,EAJO,mFAKP,EAAEQ,MAAM,YAAR,EAAsBR,mBAAO,CAAC,SAAD,cAAY,CAAC,UAAb,oGAAP,wFAAtB,EALO,sEAAT;AAJF,KAD6B,wCAAtB,6BAAT;AAAA;AAAA;AAAA;AAAA;AAcAT,MAAEoB,GAAF;AACD,GAjBD;;AAmBA;AACAV,IAAEW,IAAF,CAAOV,MAAP;AACD,CApCD;;AAsCA,cAAKT,EAAL,CAAQ,4CAAR,EAAsD,aAAK;AACzD;AACA,MAAMoB,MAAM,cAAZ;AACA,MAAMnB,MAAM;AACVC,YAAQ;AAAA,aAAM,sBAAY,UAACI,OAAD,EAAUe,MAAV,EAAqB;AAAEA,eAAOD,GAAP;AAAc,OAAjD,CAAN;AAAA;AADE,GAAZ;AAGA,MAAMZ,IAAI,6CAAmC;AAC3CX,cAAUD,cADiC;AAE3CK,YAF2C,CAEtC;AAFsC,GAAnC,CAAV;;AAKA;AACA,MAAMQ,SAAS,SAATA,MAAS,CAACa,aAAD,EAAmB;AAAA;AAAA;;AAChC,QAAMC,gEAA8DH,GAApE;AACAtB,MAAEa,EAAF,yBAAKW,aAAL;AAAA;AAAA;AAAA;AAAA,gCAAoBC,eAApB;AAAA;AAAA;AAAA;AAAA;AACAzB,MAAEoB,GAAF;;AAEA;AACAM,YAAQC,GAAR,GAAcC,GAAd,CANgC,CAMb;AACpB,GAPD;;AASA,MAAMA,MAAMF,QAAQC,GAApB;AACAD,UAAQC,GAAR,GAAchB,MAAd;;AAEA;AACAD,IAAEW,IAAF,CAAO,YAAM,CAAE,CAAf;AACD,CA1BD","file":"request-location-response-handler-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new, no-console */\nimport test from 'ava';\nimport RequestLocationResponseHandler from '../../../src/response-handlers/cli/request-location-response-handler'; // eslint-disable-line max-len\nimport RequestLocationResponse from '../../../src/responses/request-location-response';\nimport checkNotNullTest from '../../helpers/check-not-null.js';\nimport { ss } from '../../spec-support';\n\ncheckNotNullTest('response', (args) => { new RequestLocationResponseHandler(args); });\n\nconst responseObject = new RequestLocationResponse();\n\ntest('can be constructed with default parameters', t => {\n  new RequestLocationResponseHandler({ response: {} });\n  t.pass();\n});\n\ntest.cb('calls inquirer library with correct parameters', t => {\n  // arrange\n  const lib = {\n    prompt: ss.sinon.stub().returns(\n        new Promise((resolve) => {\n          resolve({ value: 123 });\n        })\n      ),\n  };\n  const h = new RequestLocationResponseHandler({\n    response: responseObject,\n    lib, // <= inject our library\n  });\n\n  // assert\n  const assert = (resultValue) => {\n    t.is(resultValue, 123);\n    t.truthy(lib.prompt.calledWith([\n      {\n        type: 'list',\n        name: 'value',\n        message: 'Your choice?',\n        choices: [\n          { name: 'Golden Gate Bridge', value: [37.818293, -122.478375] },\n          { name: 'Embarcadero BART station', value: [37.792863, -122.396889] },\n          { name: 'South San Francisco BART station', value: [37.664059, -122.443742] },\n          { name: 'IKEA East Palo Alto', value: [37.461088, -122.139215] },\n          { name: 'GooglePlex', value: [37.421955, -122.084058] },\n        ],\n      },\n    ]));\n    t.end();\n  };\n\n  // act\n  h.call(assert);\n});\n\ntest.cb('handles error while using inquirer library', t => {\n  // arrange\n  const err = 'Sample error';\n  const lib = {\n    prompt: () => new Promise((resolve, reject) => { reject(err); }),\n  };\n  const h = new RequestLocationResponseHandler({\n    response: responseObject,\n    lib, // <= inject our library\n  });\n\n  // assert\n  const assert = (actualMessage) => {\n    const expectedMessage = `Error in RequestLocationResponseHandler: ${err}`;\n    t.is(actualMessage, expectedMessage);\n    t.end();\n\n    // cleanup\n    console.log = tmp; // eslint-disable-line no-use-before-define\n  };\n\n  const tmp = console.log;\n  console.log = assert;\n\n  // act\n  h.call(() => {});\n});\n"]}