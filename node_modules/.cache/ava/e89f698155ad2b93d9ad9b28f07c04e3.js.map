{"version":3,"sources":["radius-test.js"],"names":["settings","MAX_RADIUS","n","t","is","type","truthy","call","falsy","undefined"],"mappings":"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","file":"radius-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new */\nimport test from 'ava';\nimport Radius from '../../src/conditions/radius';\n\nconst settings = { MAX_RADIUS: 10 };\n\ntest('can be constructed with default parameters', t => {\n  const n = new Radius('1', settings);\n  t.is(n.type, 'radius');\n});\n\ntest('should be truthy when numeric', t => {\n  t.truthy(new Radius(5, settings).call());\n  t.truthy(new Radius('1', settings).call());\n  t.truthy(new Radius('5', settings).call());\n  t.truthy(new Radius(' 5', settings).call());\n  t.truthy(new Radius('5 ', settings).call());\n  t.truthy(new Radius(' 5 ', settings).call());\n  t.truthy(new Radius('  5  ', settings).call());\n});\n\ntest('should be falsy when not numeric', t => {\n  t.falsy(new Radius('asd', settings).call());\n  t.falsy(new Radius(undefined, settings).call());\n  t.falsy(new Radius(' ', settings).call());\n});\n\ntest('should be falsy when out of range', t => {\n  t.falsy(new Radius('11', settings).call());\n  t.falsy(new Radius('0', settings).call());\n  t.falsy(new Radius('-1', settings).call());\n});\n\ntest('should be truthy when in range', t => {\n  t.truthy(new Radius('1', settings).call());\n  t.truthy(new Radius('2', settings).call());\n  t.truthy(new Radius('3', settings).call());\n  t.truthy(new Radius('8', settings).call());\n  t.truthy(new Radius('9', settings).call());\n  t.truthy(new Radius('10', settings).call());\n});\n"]}