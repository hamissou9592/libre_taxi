{"version":3,"sources":["identity-test.js"],"names":["identity","t","is","toString","first","last","username","identity1","identity2","identity3","identity4"],"mappings":";;weAAA;;;;;;;;;;;;;;;;;;AAkBA;;;AACA;;;;AACA;;;;;;AAEA,mBAAK,yCAAL,EAAgD,aAAK;AAAA;;AACnD,MAAMA,WAAW,uBAAa,QAAb,CAAjB;AACAC,IAAEC,EAAF,uBAAK,kDAASC,QAAT,EAAL;AAAA;AAAA;AAAA;AAAA,MAA0B,QAA1B;AACD,CAHD;;AAKA,mBAAK,qCAAL,EAA4C,aAAK;AAAA;;AAC/C,MAAMH,WAAW,uBAAa,QAAb,EAAuB,EAAvB,CAAjB;AACAC,IAAEC,EAAF,yBAAK,mDAASC,QAAT,EAAL;AAAA;AAAA;AAAA;AAAA,MAA0B,QAA1B;AACD,CAHD;;AAKA,mBAAK,sCAAL,EAA6C,aAAK;AAAA;;AAChD,MAAMH,WAAW,uBAAa,QAAb,EAAuB,EAAEI,OAAO,KAAT,EAAgBC,MAAM,KAAtB,EAA6BC,UAAU,SAAvC,EAAvB,CAAjB;AACAL,IAAEC,EAAF,yBAAK,mDAASC,QAAT,EAAL;AAAA;AAAA;AAAA;AAAA,MAA0B,2BAA1B;AACD,CAHD;;AAKA,mBAAK,yCAAL,EAAgD,aAAK;AAAA;AAAA;AAAA;;AACnD,MAAMI,YAAY,uBAAa,QAAb,EAAuB,EAAEH,OAAO,KAAT,EAAgBE,UAAU,SAA1B,EAAvB,CAAlB;AACA,MAAME,YAAY,uBAAa,QAAb,EAAuB,EAAEH,MAAM,KAAR,EAAeC,UAAU,SAAzB,EAAvB,CAAlB;AACA,MAAMG,YAAY,uBAAa,QAAb,EAAuB,EAAEL,OAAO,KAAT,EAAgBC,MAAM,KAAtB,EAAvB,CAAlB;AACAJ,IAAEC,EAAF,yBAAK,oDAAUC,QAAV,EAAL;AAAA;AAAA;AAAA;AAAA,MAA2B,uBAA3B;AACAF,IAAEC,EAAF,yBAAK,oDAAUC,QAAV,EAAL;AAAA;AAAA;AAAA;AAAA,MAA2B,uBAA3B;AACAF,IAAEC,EAAF,yBAAK,oDAAUC,QAAV,EAAL;AAAA;AAAA;AAAA;AAAA,MAA2B,kBAA3B;AACD,CAPD;;AASA,mBAAK,uCAAL,EAA8C,aAAK;AAAA;AAAA;AAAA;AAAA;;AACjD,MAAMI,YAAY,uBAAa,QAAb,EAAuB,EAAEH,OAAO,KAAT,EAAgBC,MAAM,EAAtB,EAA0BC,UAAU,SAApC,EAAvB,CAAlB;AACA,MAAME,YAAY,uBAAa,QAAb,EAAuB,EAAEJ,OAAO,EAAT,EAAaC,MAAM,KAAnB,EAA0BC,UAAU,SAApC,EAAvB,CAAlB;AACA,MAAMG,YAAY,uBAAa,QAAb,EAAuB,EAAEL,OAAO,KAAT,EAAgBC,MAAM,KAAtB,EAA6BC,UAAU,EAAvC,EAAvB,CAAlB;AACA,MAAMI,YAAY,uBAAa,QAAb,EAAuB,EAAEN,OAAO,EAAT,EAAaC,MAAM,EAAnB,EAAuBC,UAAU,EAAjC,EAAvB,CAAlB;AACAL,IAAEC,EAAF,yBAAK,oDAAUC,QAAV,EAAL;AAAA;AAAA;AAAA;AAAA,MAA2B,uBAA3B;AACAF,IAAEC,EAAF,yBAAK,oDAAUC,QAAV,EAAL;AAAA;AAAA;AAAA;AAAA,MAA2B,uBAA3B;AACAF,IAAEC,EAAF,yBAAK,oDAAUC,QAAV,EAAL;AAAA;AAAA;AAAA;AAAA,MAA2B,kBAA3B;AACAF,IAAEC,EAAF,2BAAK,qDAAUC,QAAV,EAAL;AAAA;AAAA;AAAA;AAAA,MAA2B,QAA3B;AACD,CATD","file":"identity-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new, no-console */\nimport test from 'ava';\nimport Identity from '../../src/decorators/identity';\n\ntest('should decorate with undefined identity', t => {\n  const identity = new Identity('Driver');\n  t.is(identity.toString(), 'Driver');\n});\n\ntest('should decorate with empty identity', t => {\n  const identity = new Identity('Driver', {});\n  t.is(identity.toString(), 'Driver');\n});\n\ntest('should decorate with empty all props', t => {\n  const identity = new Identity('Driver', { first: 'Foo', last: 'Bar', username: 'ro31337' });\n  t.is(identity.toString(), 'Driver (Foo Bar @ro31337)');\n});\n\ntest('should decorate with some missing props', t => {\n  const identity1 = new Identity('Driver', { first: 'Foo', username: 'ro31337' });\n  const identity2 = new Identity('Driver', { last: 'Bar', username: 'ro31337' });\n  const identity3 = new Identity('Driver', { first: 'Foo', last: 'Bar' });\n  t.is(identity1.toString(), 'Driver (Foo @ro31337)');\n  t.is(identity2.toString(), 'Driver (Bar @ro31337)');\n  t.is(identity3.toString(), 'Driver (Foo Bar)');\n});\n\ntest('should decorate with some empty props', t => {\n  const identity1 = new Identity('Driver', { first: 'Foo', last: '', username: 'ro31337' });\n  const identity2 = new Identity('Driver', { first: '', last: 'Bar', username: 'ro31337' });\n  const identity3 = new Identity('Driver', { first: 'Foo', last: 'Bar', username: '' });\n  const identity4 = new Identity('Driver', { first: '', last: '', username: '' });\n  t.is(identity1.toString(), 'Driver (Foo @ro31337)');\n  t.is(identity2.toString(), 'Driver (Bar @ro31337)');\n  t.is(identity3.toString(), 'Driver (Foo Bar)');\n  t.is(identity4.toString(), 'Driver');\n});\n"]}