'use strict';

var _getIterator2 = require('/home/hamissou/Bureau/libretaxi-master/node_modules/babel-runtime/core-js/get-iterator.js');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LibreTaxi, free and open source ride sharing platform.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Copyright (C) 2016-2017  Roman Pushkin
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            it under the terms of the GNU Affero General Public License as
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            published by the Free Software Foundation, either version 3 of the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            but WITHOUT ANY WARRANTY; without even the implied warranty of
or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GNU Affero General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            You should have received a copy of the GNU Affero General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        */

/* eslint-disable no-new, no-unused-vars */
// to aviod circular dependencies


var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _routes = require('../../../src/routes');

var _routes2 = _interopRequireDefault(_routes);

var _selectVehicleType = require('../../../src/actions/menu/driver/select-vehicle-type');

var _selectVehicleType2 = _interopRequireDefault(_selectVehicleType);

var _specSupport = require('../../spec-support');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var user = {};

(0, _ava2.default)('can be constructed with default parameters', function (t) {
  var _rec = new _powerAssertRecorder();

  var action = new _selectVehicleType2.default({ i18n: _specSupport.i18n, user: user });
  t.is(_rec._expr(_rec._capt(_rec._capt(action, 'arguments/0/object').type, 'arguments/0'), {
    content: 't.is(action.type, \'driver-select-vehicle-type\')',
    filepath: 'test/menu/driver/select-vehicle-type-test.js',
    line: 29
  }), 'driver-select-vehicle-type');
  t.pass();
});

(0, _ava2.default)('should return composite response on get', function (t) {
  var _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder(),
      _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder(),
      _rec7 = new _powerAssertRecorder(),
      _rec8 = new _powerAssertRecorder(),
      _rec9 = new _powerAssertRecorder(),
      _rec10 = new _powerAssertRecorder(),
      _rec11 = new _powerAssertRecorder(),
      _rec12 = new _powerAssertRecorder();

  var action = new _selectVehicleType2.default({ i18n: _specSupport.i18n, user: user });
  var response = action.get();
  t.is(_rec2._expr(_rec2._capt(_rec2._capt(response, 'arguments/0/object').type, 'arguments/0'), {
    content: 't.is(response.type, \'composite\')',
    filepath: 'test/menu/driver/select-vehicle-type-test.js',
    line: 36
  }), 'composite');
  t.is(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(_rec3._capt(response, 'arguments/0/object/object/object').responses, 'arguments/0/object/object')[0], 'arguments/0/object').type, 'arguments/0'), {
    content: 't.is(response.responses[0].type, \'text\')',
    filepath: 'test/menu/driver/select-vehicle-type-test.js',
    line: 37
  }), 'text');
  t.is(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(_rec4._capt(response, 'arguments/0/object/object/object').responses, 'arguments/0/object/object')[0], 'arguments/0/object').message, 'arguments/0'), {
    content: 't.is(response.responses[0].message, i18n.__(\'driver-select-vehicle-type.select\'))',
    filepath: 'test/menu/driver/select-vehicle-type-test.js',
    line: 38
  }), _rec5._expr(_rec5._capt(_rec5._capt(_specSupport.i18n, 'arguments/1/callee/object').__('driver-select-vehicle-type.select'), 'arguments/1'), {
    content: 't.is(response.responses[0].message, i18n.__(\'driver-select-vehicle-type.select\'))',
    filepath: 'test/menu/driver/select-vehicle-type-test.js',
    line: 38
  }));
  t.is(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(_rec6._capt(response, 'arguments/0/object/object/object').responses, 'arguments/0/object/object')[1], 'arguments/0/object').type, 'arguments/0'), {
    content: 't.is(response.responses[1].type, \'options\')',
    filepath: 'test/menu/driver/select-vehicle-type-test.js',
    line: 39
  }), 'options');
  t.is(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(_rec7._capt(_rec7._capt(_rec7._capt(_rec7._capt(response, 'arguments/0/object/object/object/object/object/object').responses, 'arguments/0/object/object/object/object/object')[1], 'arguments/0/object/object/object/object').rows, 'arguments/0/object/object/object')[0], 'arguments/0/object/object')[0], 'arguments/0/object').value, 'arguments/0'), {
    content: 't.is(response.responses[1].rows[0][0].value, \'car\')',
    filepath: 'test/menu/driver/select-vehicle-type-test.js',
    line: 40
  }), 'car');
  t.is(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(_rec8._capt(_rec8._capt(_rec8._capt(_rec8._capt(response, 'arguments/0/object/object/object/object/object/object').responses, 'arguments/0/object/object/object/object/object')[1], 'arguments/0/object/object/object/object').rows, 'arguments/0/object/object/object')[1], 'arguments/0/object/object')[0], 'arguments/0/object').value, 'arguments/0'), {
    content: 't.is(response.responses[1].rows[1][0].value, \'motorbike\')',
    filepath: 'test/menu/driver/select-vehicle-type-test.js',
    line: 41
  }), 'motorbike');
  t.is(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(_rec9._capt(_rec9._capt(_rec9._capt(_rec9._capt(response, 'arguments/0/object/object/object/object/object/object').responses, 'arguments/0/object/object/object/object/object')[1], 'arguments/0/object/object/object/object').rows, 'arguments/0/object/object/object')[0], 'arguments/0/object/object')[0], 'arguments/0/object').label, 'arguments/0'), {
    content: 't.is(response.responses[1].rows[0][0].label, i18n.__(\'driver-select-vehicle-type.car\'))',
    filepath: 'test/menu/driver/select-vehicle-type-test.js',
    line: 42
  }), _rec10._expr(_rec10._capt(_rec10._capt(_specSupport.i18n, 'arguments/1/callee/object').__('driver-select-vehicle-type.car'), 'arguments/1'), {
    content: 't.is(response.responses[1].rows[0][0].label, i18n.__(\'driver-select-vehicle-type.car\'))',
    filepath: 'test/menu/driver/select-vehicle-type-test.js',
    line: 42
  }));
  t.is(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(_rec11._capt(_rec11._capt(_rec11._capt(_rec11._capt(response, 'arguments/0/object/object/object/object/object/object').responses, 'arguments/0/object/object/object/object/object')[1], 'arguments/0/object/object/object/object').rows, 'arguments/0/object/object/object')[1], 'arguments/0/object/object')[0], 'arguments/0/object').label, 'arguments/0'), {
    content: 't.is(response.responses[1].rows[1][0].label, i18n.__(\'driver-select-vehicle-type.motorbike\'))',
    filepath: 'test/menu/driver/select-vehicle-type-test.js',
    line: 43
  }), _rec12._expr(_rec12._capt(_rec12._capt(_specSupport.i18n, 'arguments/1/callee/object').__('driver-select-vehicle-type.motorbike'), 'arguments/1'), {
    content: 't.is(response.responses[1].rows[1][0].label, i18n.__(\'driver-select-vehicle-type.motorbike\'))',
    filepath: 'test/menu/driver/select-vehicle-type-test.js',
    line: 43
  }));
});

(0, _ava2.default)('should return composite response on post for motorbike and car', function (t) {
  var reactions = ['motorbike', 'car'];
  var action = new _selectVehicleType2.default({ i18n: _specSupport.i18n, user: user });

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)(reactions), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _rec13 = new _powerAssertRecorder(),
          _rec14 = new _powerAssertRecorder(),
          _rec15 = new _powerAssertRecorder(),
          _rec16 = new _powerAssertRecorder(),
          _rec17 = new _powerAssertRecorder(),
          _rec18 = new _powerAssertRecorder(),
          _rec19 = new _powerAssertRecorder(),
          _rec20 = new _powerAssertRecorder();

      var reaction = _step.value;

      var response = action.post(reaction);
      t.is(_rec13._expr(_rec13._capt(_rec13._capt(response, 'arguments/0/object').type, 'arguments/0'), {
        content: 't.is(response.type, \'composite\')',
        filepath: 'test/menu/driver/select-vehicle-type-test.js',
        line: 52
      }), 'composite');
      t.is(_rec14._expr(_rec14._capt(_rec14._capt(_rec14._capt(_rec14._capt(response, 'arguments/0/object/object/object').responses, 'arguments/0/object/object')[0], 'arguments/0/object').type, 'arguments/0'), {
        content: 't.is(response.responses[0].type, \'text\')',
        filepath: 'test/menu/driver/select-vehicle-type-test.js',
        line: 53
      }), 'text');
      t.is(_rec15._expr(_rec15._capt(_rec15._capt(_rec15._capt(_rec15._capt(response, 'arguments/0/object/object/object').responses, 'arguments/0/object/object')[0], 'arguments/0/object').message, 'arguments/0'), {
        content: 't.is(response.responses[0].message, \'\uD83D\uDC4C OK!\')',
        filepath: 'test/menu/driver/select-vehicle-type-test.js',
        line: 54
      }), '👌 OK!');
      t.is(_rec16._expr(_rec16._capt(_rec16._capt(_rec16._capt(_rec16._capt(response, 'arguments/0/object/object/object').responses, 'arguments/0/object/object')[1], 'arguments/0/object').type, 'arguments/0'), {
        content: 't.is(response.responses[1].type, \'user-state\')',
        filepath: 'test/menu/driver/select-vehicle-type-test.js',
        line: 55
      }), 'user-state');
      t.is(_rec17._expr(_rec17._capt(_rec17._capt(_rec17._capt(_rec17._capt(_rec17._capt(response, 'arguments/0/object/object/object/object').responses, 'arguments/0/object/object/object')[1], 'arguments/0/object/object').state, 'arguments/0/object').vehicleType, 'arguments/0'), {
        content: 't.is(response.responses[1].state.vehicleType, reaction)',
        filepath: 'test/menu/driver/select-vehicle-type-test.js',
        line: 56
      }), _rec18._expr(_rec18._capt(reaction, 'arguments/1'), {
        content: 't.is(response.responses[1].state.vehicleType, reaction)',
        filepath: 'test/menu/driver/select-vehicle-type-test.js',
        line: 56
      }));
      t.is(_rec19._expr(_rec19._capt(_rec19._capt(_rec19._capt(_rec19._capt(response, 'arguments/0/object/object/object').responses, 'arguments/0/object/object')[2], 'arguments/0/object').type, 'arguments/0'), {
        content: 't.is(response.responses[2].type, \'redirect\')',
        filepath: 'test/menu/driver/select-vehicle-type-test.js',
        line: 57
      }), 'redirect');
      t.is(_rec20._expr(_rec20._capt(_rec20._capt(_rec20._capt(_rec20._capt(response, 'arguments/0/object/object/object').responses, 'arguments/0/object/object')[2], 'arguments/0/object').path, 'arguments/0'), {
        content: 't.is(response.responses[2].path, \'driver-explain-checkins\')',
        filepath: 'test/menu/driver/select-vehicle-type-test.js',
        line: 58
      }), 'driver-explain-checkins');
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
});

(0, _ava2.default)('should return error on post with unknown reaction', function (t) {
  var _rec21 = new _powerAssertRecorder(),
      _rec22 = new _powerAssertRecorder(),
      _rec23 = new _powerAssertRecorder(),
      _rec24 = new _powerAssertRecorder();

  var action = new _selectVehicleType2.default({ i18n: _specSupport.i18n, user: user });
  var response = action.post('whatever');
  t.is(_rec21._expr(_rec21._capt(_rec21._capt(response, 'arguments/0/object').type, 'arguments/0'), {
    content: 't.is(response.type, \'composite\')',
    filepath: 'test/menu/driver/select-vehicle-type-test.js',
    line: 65
  }), 'composite');
  t.is(_rec22._expr(_rec22._capt(_rec22._capt(_rec22._capt(_rec22._capt(response, 'arguments/0/object/object/object').responses, 'arguments/0/object/object')[0], 'arguments/0/object').type, 'arguments/0'), {
    content: 't.is(response.responses[0].type, \'error\')',
    filepath: 'test/menu/driver/select-vehicle-type-test.js',
    line: 66
  }), 'error');
  t.is(_rec23._expr(_rec23._capt(_rec23._capt(_rec23._capt(_rec23._capt(response, 'arguments/0/object/object/object').responses, 'arguments/0/object/object')[0], 'arguments/0/object').message, 'arguments/0'), {
    content: 't.is(response.responses[0].message, i18n.__(\'driver-select-vehicle-type.error_only_known_type\'))',
    filepath: 'test/menu/driver/select-vehicle-type-test.js',
    line: 67
  }), _rec24._expr(_rec24._capt(_rec24._capt(_specSupport.i18n, 'arguments/1/callee/object').__('driver-select-vehicle-type.error_only_known_type'), 'arguments/1'), {
    content: 't.is(response.responses[0].message, i18n.__(\'driver-select-vehicle-type.error_only_known_type\'))',
    filepath: 'test/menu/driver/select-vehicle-type-test.js',
    line: 67
  }));
});
//# sourceMappingURL=../../../node_modules/.cache/ava/522cdef15382b100e40a4b710d7d8daa.js.map