{"version":3,"sources":["cli-ca-queue-test.js"],"names":["args","queue","userKey","t","is","type","process","instanceType","cb","plan","recreate","num","callback","end","instanceQueue","instanceKue","create","sinon","stub","returns","removeOnComplete","save","data","foo","job","done","truthy","calledWith","assert","callOrder"],"mappings":"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","file":"cli-ca-queue-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new */\nimport test from 'ava';\nimport CliCaQueue from '../../src/queue/cli-ca-queue';\nimport checkNotNullTest from '../helpers/check-not-null.js';\nimport { ss } from '../spec-support';\nimport sinon from 'sinon';\n\ncheckNotNullTest('userKey', (args) => { new CliCaQueue(args); });\n\ntest('should have ca type', t => {\n  const queue = new CliCaQueue({ userKey: 'cli_1' });\n  t.is(queue.type, 'call-action');\n  queue.process();\n});\n\ntest('should have instance type', t => {\n  const queue = new CliCaQueue({ userKey: 'cli_1' });\n  t.is(queue.instanceType, 'call-action-cli_1');\n});\n\ntest.cb('should call super.process(recreate) on process', t => {\n  t.plan(3);\n  const cb = { cb: true };\n  const recreate = { recreate: true };\n  const queue = new CliCaQueue({\n    userKey: 'cli_1',\n    queue: { // inject dependency\n      process: (type, num, callback) => {\n        t.is(type, 'call-action');\n        t.is(num, 20);\n        t.is(callback, recreate);\n        t.end();\n      },\n    },\n    instanceQueue: {\n      process: () => {},\n    },\n  });\n  queue.recreate = recreate;\n  queue.process(cb);\n});\n\ntest.cb('should subscribe to instance queue messages on process', t => {\n  t.plan(1);\n  const cb = { cb: true };\n  const queue = new CliCaQueue({\n    userKey: 'cli_1',\n    queue: {\n      process: () => {},\n    },\n    instanceQueue: {\n      process: (callback) => { // we call \"process\" - this is how we're subscribed\n        t.is(callback, cb);\n        t.end();\n      },\n    },\n  });\n  queue.recreate = () => {};\n  queue.process(cb);\n});\n\ntest.cb('should recreate message on recreate callback', t => {\n  t.plan(3);\n\n  const instanceKue = {};\n  const create = ss.sinon.stub().returns(instanceKue);\n  const removeOnComplete = ss.sinon.stub().returns(instanceKue);\n  const save = ss.sinon.stub().returns(instanceKue);\n  Object.assign(instanceKue, { create, removeOnComplete, save });\n\n  const data = { foo: 'bar', userKey: 'cli_2' };\n  const job = { data };\n  const queue = new CliCaQueue({\n    userKey: 'cli_1',\n    instanceKue,\n  });\n  const done = () => {\n    t.truthy(create.calledWith('call-action-cli_2', { foo: 'bar', userKey: 'cli_2' }));\n    t.truthy(removeOnComplete.calledWith(true));\n    t.truthy(save.calledWith());\n    sinon.assert.callOrder(create, removeOnComplete, save);\n    t.end();\n  };\n  queue.recreate(job, done);\n});\n"]}