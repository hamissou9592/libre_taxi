{"version":3,"sources":["request-phone-response-handler-test.js"],"names":["args","responseObject","response","t","pass","cb","lib","prompt","sinon","stub","returns","resolve","phone","h","assert","resultValue","is","truthy","calledWith","type","name","message","default","end","call","err","reject","actualMessage","expectedMessage","console","log","tmp"],"mappings":";;;;;;weAAA;;;;;;;;;;;;;;;;;;AAkBA;AAE6G;;;AAD7G;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,4BAAiB,UAAjB,EAA6B,UAACA,IAAD,EAAU;AAAE,4CAAgCA,IAAhC;AAAwC,CAAjF;;AAEA,IAAMC,iBAAiB,oCAAvB;;AAEA,mBAAK,4CAAL,EAAmD,aAAK;AACtD,4CAAgC,EAAEC,UAAU,EAAZ,EAAhC;AACAC,IAAEC,IAAF;AACD,CAHD;;AAKA,cAAKC,EAAL,CAAQ,gDAAR,EAA0D,aAAK;AAC7D;AACA,MAAMC,MAAM;AACVC,YAAQ,gBAAGC,KAAH,CAASC,IAAT,GAAgBC,OAAhB,CACJ,sBAAY,UAACC,OAAD,EAAa;AACvBA,cAAQ,EAAEC,OAAO,KAAT,EAAR;AACD,KAFD,CADI;AADE,GAAZ;AAOA,MAAMC,IAAI,0CAAgC;AACxCX,cAAUD,cAD8B;AAExCK,YAFwC,CAEnC;AAFmC,GAAhC,CAAV;;AAKA;AACA,MAAMQ,SAAS,SAATA,MAAS,CAACC,WAAD,EAAiB;AAAA;AAAA;;AAC9BZ,MAAEa,EAAF,uBAAKD,WAAL;AAAA;AAAA;AAAA;AAAA,QAAkB,KAAlB;AACAZ,MAAEc,MAAF,yBAAS,iEAAIV,MAAJ,+BAAWW,UAAX,aAAsB,aAC7B;AACEC,YAAM,OADR;AAEEC,YAAM,OAFR;AAGEC,eAAS,mBAHX;AAIEC,eAAS;AAJX,KAD6B,wCAAtB,6BAAT;AAAA;AAAA;AAAA;AAAA;AAQAnB,MAAEoB,GAAF;AACD,GAXD;;AAaA;AACAV,IAAEW,IAAF,CAAOV,MAAP;AACD,CA9BD;;AAgCA,cAAKT,EAAL,CAAQ,4CAAR,EAAsD,aAAK;AACzD;AACA,MAAMoB,MAAM,cAAZ;AACA,MAAMnB,MAAM;AACVC,YAAQ;AAAA,aAAM,sBAAY,UAACI,OAAD,EAAUe,MAAV,EAAqB;AAAEA,eAAOD,GAAP;AAAc,OAAjD,CAAN;AAAA;AADE,GAAZ;AAGA,MAAMZ,IAAI,0CAAgC;AACxCX,cAAUD,cAD8B;AAExCK,YAFwC,CAEnC;AAFmC,GAAhC,CAAV;;AAKA;AACA,MAAMQ,SAAS,SAATA,MAAS,CAACa,aAAD,EAAmB;AAAA;AAAA;;AAChC,QAAMC,6DAA2DH,GAAjE;AACAtB,MAAEa,EAAF,yBAAKW,aAAL;AAAA;AAAA;AAAA;AAAA,gCAAoBC,eAApB;AAAA;AAAA;AAAA;AAAA;AACAzB,MAAEoB,GAAF;;AAEA;AACAM,YAAQC,GAAR,GAAcC,GAAd,CANgC,CAMb;AACpB,GAPD;;AASA,MAAMA,MAAMF,QAAQC,GAApB;AACAD,UAAQC,GAAR,GAAchB,MAAd;;AAEA;AACAD,IAAEW,IAAF,CAAO,YAAM,CAAE,CAAf;AACD,CA1BD","file":"request-phone-response-handler-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new, no-console */\nimport test from 'ava';\nimport RequestPhoneResponseHandler from '../../../src/response-handlers/cli/request-phone-response-handler'; // eslint-disable-line max-len\nimport RequestPhoneResponse from '../../../src/responses/request-phone-response';\nimport checkNotNullTest from '../../helpers/check-not-null.js';\nimport { ss } from '../../spec-support';\n\ncheckNotNullTest('response', (args) => { new RequestPhoneResponseHandler(args); });\n\nconst responseObject = new RequestPhoneResponse();\n\ntest('can be constructed with default parameters', t => {\n  new RequestPhoneResponseHandler({ response: {} });\n  t.pass();\n});\n\ntest.cb('calls inquirer library with correct parameters', t => {\n  // arrange\n  const lib = {\n    prompt: ss.sinon.stub().returns(\n        new Promise((resolve) => {\n          resolve({ phone: '123' });\n        })\n      ),\n  };\n  const h = new RequestPhoneResponseHandler({\n    response: responseObject,\n    lib, // <= inject our library\n  });\n\n  // assert\n  const assert = (resultValue) => {\n    t.is(resultValue, '123');\n    t.truthy(lib.prompt.calledWith([\n      {\n        type: 'input',\n        name: 'phone',\n        message: 'Your phone number',\n        default: '(555) 111-22-33',\n      },\n    ]));\n    t.end();\n  };\n\n  // act\n  h.call(assert);\n});\n\ntest.cb('handles error while using inquirer library', t => {\n  // arrange\n  const err = 'Sample error';\n  const lib = {\n    prompt: () => new Promise((resolve, reject) => { reject(err); }),\n  };\n  const h = new RequestPhoneResponseHandler({\n    response: responseObject,\n    lib, // <= inject our library\n  });\n\n  // assert\n  const assert = (actualMessage) => {\n    const expectedMessage = `Error in RequestPhoneResponseHandler: ${err}`;\n    t.is(actualMessage, expectedMessage);\n    t.end();\n\n    // cleanup\n    console.log = tmp; // eslint-disable-line no-use-before-define\n  };\n\n  const tmp = console.log;\n  console.log = assert;\n\n  // act\n  h.call(() => {});\n});\n"]}