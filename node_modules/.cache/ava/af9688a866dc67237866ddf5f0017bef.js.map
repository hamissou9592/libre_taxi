{"version":3,"sources":["save-order-response-handler-test.js"],"names":["STATEFUL_CONNSTR","STATEFUL_CREDENTIALS_FILE","undefined","server","response","orderKey","passengerKey","passengerLocation","passengerDestination","price","createdAt","Date","getTime","requestedVehicleType","before","after","always","close","args","t","pass","cb","plan","platformType","platformId","load","then","user","assert","db","config","ref","on","snapshot","obj","val","is","keys","length","firstKey","v","truthy","g","deepEqual","l","status","state","currentOrderKey","end","handler","call","err","actualMessage","expectedMessage","console","log","tmp","fakeGeoFire","set","resolve","reject","geoFire"],"mappings":"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","file":"save-order-response-handler-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new, no-console, no-unused-vars */\nimport test from 'ava';\nimport SaveOrderResponseHandler from '../../../src/response-handlers/submit-order/save-order-response-handler'; // eslint-disable-line max-len\nimport SaveOrderResponse from '../../../src/responses/submit-order/save-order-response';\nimport checkNotNullTest from '../../helpers/check-not-null.js';\nimport FirebaseServer from 'firebase-server';\nimport firebaseDB, { overrideSettings } from '../../../src/firebase-db';\nimport { ss } from '../../spec-support';\nimport sinon from 'sinon';\nimport User from '../../../src/user';\n\noverrideSettings({\n  STATEFUL_CONNSTR: 'ws://localhost.firebaseio.test:5504',\n  STATEFUL_CREDENTIALS_FILE: undefined,\n});\n\nlet server = null;\nconst response = new SaveOrderResponse({\n  orderKey: '07b0f3af-7ed5-45c6-bdfe-f61d05a199fe',\n  passengerKey: 'cli_1',\n  passengerLocation: [37.421955, -122.084058],\n  passengerDestination: 'South San Francisco BART station, CA, 94080',\n  price: 50,\n  createdAt: (new Date).getTime(), // use Firebase Timestamp in your code!\n  requestedVehicleType: 'motorbike',\n});\n\ntest.before(() => {\n  server = new FirebaseServer(5504, 'localhost.firebaseio.test', {}); // empty db\n});\n\ntest.after.always('guaranteed cleanup', () => {\n  server.close();\n});\n\ncheckNotNullTest('response', (args) => { new SaveOrderResponseHandler(args); });\n\ntest('can be constructed with default parameters', t => {\n  new SaveOrderResponseHandler({ response: {} });\n  t.pass();\n});\n\ntest.cb('should create order and inform passenger when called', t => {\n  t.plan(12);\n  new User({ platformType: 'cli', platformId: 1 }).load().then((user) => {\n    const assert = () => {\n      const db = firebaseDB.config().ref('orders');\n      db.on('value', (snapshot) => {\n        const obj = snapshot.val();\n\n        /* Database should look like this:\n\n        { '27455828-d309-4370-bb10-6674d9d467f9':\n           { createdAt: 1471578557107,\n             g: '9q9hvumneq',\n             l: [ 37.421955, -122.084058 ],\n             passengerDestination: 'South San Francisco BART station, CA, 94080',\n             passengerKey: 'cli_1',\n             passengerLocation: [ 37.421955, -122.084058 ] } }\n\n        Only one key-value pair. So we just need to get the first value.\n        */\n\n        t.is(Object.keys(obj).length, 1); // there should be 1 record\n        const firstKey = Object.keys(obj)[0]; // first key (guid)\n        const v = obj[firstKey]; // get the value (order properties)\n\n        t.is(firstKey, '07b0f3af-7ed5-45c6-bdfe-f61d05a199fe');\n        t.truthy(v.g); // geoFire metadata should be truthy\n        t.deepEqual(v.l, [37.421955, -122.084058]); // geoFire location\n        t.deepEqual(v.passengerLocation, [37.421955, -122.084058]);\n        t.is(v.passengerKey, 'cli_1');\n        t.is(v.passengerDestination, 'South San Francisco BART station, CA, 94080');\n        t.is(v.status, 'new');\n        t.is(v.requestedVehicleType, 'motorbike');\n        t.is(v.price, 50);\n        t.truthy(v.createdAt);\n        t.is(user.state.currentOrderKey, firstKey);\n        t.end();\n      });\n    };\n\n    const handler = new SaveOrderResponseHandler({ response, user });\n    handler.call(assert);\n  });\n});\n\ntest.cb('handles error while saving location', t => {\n  const err = 'Sample error';\n\n  // assert function, to be executed on `act`\n  const assert = (actualMessage) => {\n    const expectedMessage = `Error in SaveOrderResponseHandler (geoFire): ${err}`;\n    t.is(actualMessage, expectedMessage);\n    t.end();\n\n    // cleanup\n    console.log = tmp; // eslint-disable-line no-use-before-define\n  };\n\n  // arrange: replace `console.log` with `assert` function created above\n  const tmp = console.log;\n  console.log = assert;\n\n  // arrange: create fake geoFire, it will replace `handler.geoFire`\n  const fakeGeoFire = { set: () => new Promise((resolve, reject) => { reject(err); }) };\n\n  // act\n  const handler = new SaveOrderResponseHandler({ response });\n  handler.geoFire = fakeGeoFire;\n  handler.call(() => {});\n});\n"]}