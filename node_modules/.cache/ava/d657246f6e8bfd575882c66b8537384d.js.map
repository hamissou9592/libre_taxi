{"version":3,"sources":["empty-response-handler-test.js"],"names":["h","response","t","is","type","pass","call","onResult","sinon","spy","called"],"mappings":";;weAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;AACA;;;;AACA;;;;AAEA,mBAAK,4CAAL,EAAmD,aAAK;AAAA;;AACtD,MAAMA,IAAI,mCAAyB,EAAEC,UAAU,EAAZ,EAAzB,CAAV;AACAC,IAAEC,EAAF,uBAAK,oCAAEC,IAAP;AAAA;AAAA;AAAA;AAAA,MAAa,wBAAb;AACAF,IAAEG,IAAF;AACD,CAJD;;AAMA,mBAAK,yCAAL,EAAgD,aAAK;AACnD,MAAML,IAAI,mCAAyB,EAAEC,UAAU,EAAZ,EAAzB,CAAV;AACAD,IAAEM,IAAF;AACAJ,IAAEG,IAAF;AACD,CAJD;;AAMA,mBAAK,oDAAL,EAA2D,aAAK;AAAA;;AAC9D,MAAML,IAAI,mCAAyB,EAAEC,UAAU,EAAZ,EAAzB,CAAV;AACA,MAAMM,WAAW,gBAAGC,KAAH,CAASC,GAAT,EAAjB;AACAT,IAAEM,IAAF,CAAOC,QAAP;AACAL,IAAEC,EAAF,yBAAK,4CAASO,MAAd;AAAA;AAAA;AAAA;AAAA,MAAsB,KAAtB;AACAR,IAAEG,IAAF;AACD,CAND","file":"empty-response-handler-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport test from 'ava';\nimport EmptyResponseHandler from '../../src/response-handlers/empty-response-handler';\nimport { ss } from '../spec-support';\n\ntest('can be constructed with default parameters', t => {\n  const h = new EmptyResponseHandler({ response: {} });\n  t.is(h.type, 'empty-response-handler');\n  t.pass();\n});\n\ntest('can be called without callback function', t => {\n  const h = new EmptyResponseHandler({ response: {} });\n  h.call();\n  t.pass();\n});\n\ntest('should not execute callback even if it\\'s provided', t => {\n  const h = new EmptyResponseHandler({ response: {} });\n  const onResult = ss.sinon.spy();\n  h.call(onResult);\n  t.is(onResult.called, false);\n  t.pass();\n});\n"]}