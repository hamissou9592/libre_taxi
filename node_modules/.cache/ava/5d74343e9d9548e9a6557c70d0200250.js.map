{"version":3,"sources":["options-response-handler-test.js"],"names":["args","responseObject","rows","label","value","response","t","pass","cb","lib","prompt","sinon","stub","returns","resolve","h","assert","resultValue","is","truthy","calledWith","type","name","message","choices","end","call","err","reject","actualMessage","expectedMessage","console","log","tmp"],"mappings":";;;;;;weAAA;;;;;;;;;;;;;;;;;;AAkBA;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,4BAAiB,UAAjB,EAA6B,UAACA,IAAD,EAAU;AAAE,uCAA2BA,IAA3B;AAAmC,CAA5E;;AAEA,IAAMC,iBAAiB,8BAAoB;AACzCC,QAAM,CACJ,CAAC,EAAEC,OAAO,KAAT,EAAgBC,OAAO,GAAvB,EAAD,EAA+B,EAAED,OAAO,KAAT,EAAgBC,OAAO,GAAvB,EAA/B,EAA6D,EAAED,OAAO,OAAT,EAAkBC,OAAO,GAAzB,EAA7D,CADI,EAC0F;AAC9F,GAAC,EAAED,OAAO,IAAT,EAAeC,OAAO,IAAtB,EAAD,EAA+B,EAAED,OAAO,QAAT,EAAmBC,OAAO,QAA1B,EAA/B,CAFI;AADmC,CAApB,CAAvB;;AAOA,mBAAK,4CAAL,EAAmD,aAAK;AACtD,uCAA2B,EAAEC,UAAU,EAAZ,EAA3B;AACAC,IAAEC,IAAF;AACD,CAHD;;AAKA,cAAKC,EAAL,CAAQ,gDAAR,EAA0D,aAAK;AAC7D;AACA,MAAMC,MAAM;AACVC,YAAQ,gBAAGC,KAAH,CAASC,IAAT,GAAgBC,OAAhB,CACJ,sBAAY,UAACC,OAAD,EAAa;AACvBA,cAAQ,EAAEV,OAAO,GAAT,EAAR;AACD,KAFD,CADI;AADE,GAAZ;AAOA,MAAMW,IAAI,qCAA2B;AACnCV,cAAUJ,cADyB;AAEnCQ,YAFmC,CAE9B;AAF8B,GAA3B,CAAV;;AAKA;AACA,MAAMO,SAAS,SAATA,MAAS,CAACC,WAAD,EAAiB;AAAA;AAAA;;AAC9BX,MAAEY,EAAF,uBAAKD,WAAL;AAAA;AAAA;AAAA;AAAA,QAAkB,GAAlB;AACAX,MAAEa,MAAF,yBAAS,iEAAIT,MAAJ,+BAAWU,UAAX,aAAsB,aAC7B;AACEC,YAAM,MADR;AAEEC,YAAM,OAFR;AAGEC,eAAS,cAHX;AAIEC,2BAAS,aACP,EAAEF,MAAM,KAAR,EAAelB,OAAO,GAAtB,EADO,mFAEP,EAAEkB,MAAM,KAAR,EAAelB,OAAO,GAAtB,EAFO,mFAGP,EAAEkB,MAAM,OAAR,EAAiBlB,OAAO,GAAxB,EAHO,mFAIP,EAAEkB,MAAM,IAAR,EAAclB,OAAO,IAArB,EAJO,mFAKP,EAAEkB,MAAM,QAAR,EAAkBlB,OAAO,QAAzB,EALO,sEAAT;AAJF,KAD6B,wCAAtB,6BAAT;AAAA;AAAA;AAAA;AAAA;AAcAE,MAAEmB,GAAF;AACD,GAjBD;;AAmBA;AACAV,IAAEW,IAAF,CAAOV,MAAP;AACD,CApCD;;AAsCA,cAAKR,EAAL,CAAQ,4CAAR,EAAsD,aAAK;AACzD;AACA,MAAMmB,MAAM,cAAZ;AACA,MAAMlB,MAAM;AACVC,YAAQ;AAAA,aAAM,sBAAY,UAACI,OAAD,EAAUc,MAAV,EAAqB;AAAEA,eAAOD,GAAP;AAAc,OAAjD,CAAN;AAAA;AADE,GAAZ;AAGA,MAAMZ,IAAI,qCAA2B;AACnCV,cAAUJ,cADyB;AAEnCQ,YAFmC,CAE9B;AAF8B,GAA3B,CAAV;;AAKA;AACA,MAAMO,SAAS,SAATA,MAAS,CAACa,aAAD,EAAmB;AAAA;AAAA;;AAChC,QAAMC,wDAAsDH,GAA5D;AACArB,MAAEY,EAAF,yBAAKW,aAAL;AAAA;AAAA;AAAA;AAAA,gCAAoBC,eAApB;AAAA;AAAA;AAAA;AAAA;AACAxB,MAAEmB,GAAF;;AAEA;AACAM,YAAQC,GAAR,GAAcC,GAAd,CANgC,CAMb;AACpB,GAPD;;AASA,MAAMA,MAAMF,QAAQC,GAApB;AACAD,UAAQC,GAAR,GAAchB,MAAd;;AAEA;AACAD,IAAEW,IAAF,CAAO,YAAM,CAAE,CAAf;AACD,CA1BD","file":"options-response-handler-test.js","sourcesContent":["/*\n    LibreTaxi, free and open source ride sharing platform.\n    Copyright (C) 2016-2017  Roman Pushkin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-new, no-console */\nimport test from 'ava';\nimport OptionsResponseHandler from '../../../src/response-handlers/cli/options-response-handler';\nimport OptionsResponse from '../../../src/responses/options-response';\nimport checkNotNullTest from '../../helpers/check-not-null.js';\nimport { ss } from '../../spec-support';\n\ncheckNotNullTest('response', (args) => { new OptionsResponseHandler(args); });\n\nconst responseObject = new OptionsResponse({\n  rows: [\n    [{ label: 'One', value: '1' }, { label: 'Two', value: '2' }, { label: 'Three', value: '3' }], // eslint-disable-line max-len\n    [{ label: 'OK', value: 'ok' }, { label: 'Cancel', value: 'cancel' }],\n  ],\n});\n\ntest('can be constructed with default parameters', t => {\n  new OptionsResponseHandler({ response: {} });\n  t.pass();\n});\n\ntest.cb('calls inquirer library with correct parameters', t => {\n  // arrange\n  const lib = {\n    prompt: ss.sinon.stub().returns(\n        new Promise((resolve) => {\n          resolve({ value: 123 });\n        })\n      ),\n  };\n  const h = new OptionsResponseHandler({\n    response: responseObject,\n    lib, // <= inject our library\n  });\n\n  // assert\n  const assert = (resultValue) => {\n    t.is(resultValue, 123);\n    t.truthy(lib.prompt.calledWith([\n      {\n        type: 'list',\n        name: 'value',\n        message: 'Your choice?',\n        choices: [\n          { name: 'One', value: '1' },\n          { name: 'Two', value: '2' },\n          { name: 'Three', value: '3' },\n          { name: 'OK', value: 'ok' },\n          { name: 'Cancel', value: 'cancel' },\n        ],\n      },\n    ]));\n    t.end();\n  };\n\n  // act\n  h.call(assert);\n});\n\ntest.cb('handles error while using inquirer library', t => {\n  // arrange\n  const err = 'Sample error';\n  const lib = {\n    prompt: () => new Promise((resolve, reject) => { reject(err); }),\n  };\n  const h = new OptionsResponseHandler({\n    response: responseObject,\n    lib, // <= inject our library\n  });\n\n  // assert\n  const assert = (actualMessage) => {\n    const expectedMessage = `Error in OptionsResponseHandler: ${err}`;\n    t.is(actualMessage, expectedMessage);\n    t.end();\n\n    // cleanup\n    console.log = tmp; // eslint-disable-line no-use-before-define\n  };\n\n  const tmp = console.log;\n  console.log = assert;\n\n  // act\n  h.call(() => {});\n});\n"]}