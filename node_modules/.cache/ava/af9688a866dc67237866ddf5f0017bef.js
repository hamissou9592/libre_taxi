'use strict';

var _promise = require('/home/hamissou/Bureau/libretaxi-master/node_modules/babel-runtime/core-js/promise.js');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('/home/hamissou/Bureau/libretaxi-master/node_modules/babel-runtime/core-js/object/keys.js');

var _keys2 = _interopRequireDefault(_keys);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LibreTaxi, free and open source ride sharing platform.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Copyright (C) 2016-2017  Roman Pushkin
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            it under the terms of the GNU Affero General Public License as
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            published by the Free Software Foundation, either version 3 of the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            but WITHOUT ANY WARRANTY; without even the implied warranty of
or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GNU Affero General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            You should have received a copy of the GNU Affero General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        */

/* eslint-disable no-new, no-console, no-unused-vars */
// eslint-disable-line max-len


var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _saveOrderResponseHandler = require('../../../src/response-handlers/submit-order/save-order-response-handler');

var _saveOrderResponseHandler2 = _interopRequireDefault(_saveOrderResponseHandler);

var _saveOrderResponse = require('../../../src/responses/submit-order/save-order-response');

var _saveOrderResponse2 = _interopRequireDefault(_saveOrderResponse);

var _checkNotNull = require('../../helpers/check-not-null.js');

var _checkNotNull2 = _interopRequireDefault(_checkNotNull);

var _firebaseServer = require('firebase-server');

var _firebaseServer2 = _interopRequireDefault(_firebaseServer);

var _firebaseDb = require('../../../src/firebase-db');

var _firebaseDb2 = _interopRequireDefault(_firebaseDb);

var _specSupport = require('../../spec-support');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _user = require('../../../src/user');

var _user2 = _interopRequireDefault(_user);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _firebaseDb.overrideSettings)({
  STATEFUL_CONNSTR: 'ws://localhost.firebaseio.test:5504',
  STATEFUL_CREDENTIALS_FILE: undefined
});

var server = null;
var response = new _saveOrderResponse2.default({
  orderKey: '07b0f3af-7ed5-45c6-bdfe-f61d05a199fe',
  passengerKey: 'cli_1',
  passengerLocation: [37.421955, -122.084058],
  passengerDestination: 'South San Francisco BART station, CA, 94080',
  price: 50,
  createdAt: new Date().getTime(), // use Firebase Timestamp in your code!
  requestedVehicleType: 'motorbike'
});

_ava2.default.before(function () {
  server = new _firebaseServer2.default(5504, 'localhost.firebaseio.test', {}); // empty db
});

_ava2.default.after.always('guaranteed cleanup', function () {
  server.close();
});

(0, _checkNotNull2.default)('response', function (args) {
  new _saveOrderResponseHandler2.default(args);
});

(0, _ava2.default)('can be constructed with default parameters', function (t) {
  new _saveOrderResponseHandler2.default({ response: {} });
  t.pass();
});

_ava2.default.cb('should create order and inform passenger when called', function (t) {
  t.plan(12);
  new _user2.default({ platformType: 'cli', platformId: 1 }).load().then(function (user) {
    var assert = function assert() {
      var db = _firebaseDb2.default.config().ref('orders');
      db.on('value', function (snapshot) {
        var _rec = new _powerAssertRecorder(),
            _rec2 = new _powerAssertRecorder(),
            _rec3 = new _powerAssertRecorder(),
            _rec4 = new _powerAssertRecorder(),
            _rec5 = new _powerAssertRecorder(),
            _rec6 = new _powerAssertRecorder(),
            _rec7 = new _powerAssertRecorder(),
            _rec8 = new _powerAssertRecorder(),
            _rec9 = new _powerAssertRecorder(),
            _rec10 = new _powerAssertRecorder(),
            _rec11 = new _powerAssertRecorder(),
            _rec12 = new _powerAssertRecorder(),
            _rec13 = new _powerAssertRecorder(),
            _rec14 = new _powerAssertRecorder(),
            _rec15 = new _powerAssertRecorder();

        var obj = snapshot.val();

        /* Database should look like this:
         { '27455828-d309-4370-bb10-6674d9d467f9':
           { createdAt: 1471578557107,
             g: '9q9hvumneq',
             l: [ 37.421955, -122.084058 ],
             passengerDestination: 'South San Francisco BART station, CA, 94080',
             passengerKey: 'cli_1',
             passengerLocation: [ 37.421955, -122.084058 ] } }
         Only one key-value pair. So we just need to get the first value.
        */

        t.is(_rec._expr(_rec._capt(_rec._capt(_rec._capt(Object, 'arguments/0/object/callee/object').keys(_rec._capt(obj, 'arguments/0/object/arguments/0')), 'arguments/0/object').length, 'arguments/0'), {
          content: 't.is(Object.keys(obj).length, 1)',
          filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
          line: 82
        }), 1); // there should be 1 record
        var firstKey = (0, _keys2.default)(obj)[0]; // first key (guid)
        var v = obj[firstKey]; // get the value (order properties)

        t.is(_rec2._expr(_rec2._capt(firstKey, 'arguments/0'), {
          content: 't.is(firstKey, \'07b0f3af-7ed5-45c6-bdfe-f61d05a199fe\')',
          filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
          line: 86
        }), '07b0f3af-7ed5-45c6-bdfe-f61d05a199fe');
        t.truthy(_rec3._expr(_rec3._capt(_rec3._capt(v, 'arguments/0/object').g, 'arguments/0'), {
          content: 't.truthy(v.g)',
          filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
          line: 87
        })); // geoFire metadata should be truthy
        t.deepEqual(_rec4._expr(_rec4._capt(_rec4._capt(v, 'arguments/0/object').l, 'arguments/0'), {
          content: 't.deepEqual(v.l, [37.421955, -122.084058])',
          filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
          line: 88
        }), _rec5._expr(_rec5._capt([37.421955, _rec5._capt(-122.084058, 'arguments/1/elements/1')], 'arguments/1'), {
          content: 't.deepEqual(v.l, [37.421955, -122.084058])',
          filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
          line: 88
        })); // geoFire location
        t.deepEqual(_rec6._expr(_rec6._capt(_rec6._capt(v, 'arguments/0/object').passengerLocation, 'arguments/0'), {
          content: 't.deepEqual(v.passengerLocation, [37.421955, -122.084058])',
          filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
          line: 89
        }), _rec7._expr(_rec7._capt([37.421955, _rec7._capt(-122.084058, 'arguments/1/elements/1')], 'arguments/1'), {
          content: 't.deepEqual(v.passengerLocation, [37.421955, -122.084058])',
          filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
          line: 89
        }));
        t.is(_rec8._expr(_rec8._capt(_rec8._capt(v, 'arguments/0/object').passengerKey, 'arguments/0'), {
          content: 't.is(v.passengerKey, \'cli_1\')',
          filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
          line: 90
        }), 'cli_1');
        t.is(_rec9._expr(_rec9._capt(_rec9._capt(v, 'arguments/0/object').passengerDestination, 'arguments/0'), {
          content: 't.is(v.passengerDestination, \'South San Francisco BART station, CA, 94080\')',
          filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
          line: 91
        }), 'South San Francisco BART station, CA, 94080');
        t.is(_rec10._expr(_rec10._capt(_rec10._capt(v, 'arguments/0/object').status, 'arguments/0'), {
          content: 't.is(v.status, \'new\')',
          filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
          line: 92
        }), 'new');
        t.is(_rec11._expr(_rec11._capt(_rec11._capt(v, 'arguments/0/object').requestedVehicleType, 'arguments/0'), {
          content: 't.is(v.requestedVehicleType, \'motorbike\')',
          filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
          line: 93
        }), 'motorbike');
        t.is(_rec12._expr(_rec12._capt(_rec12._capt(v, 'arguments/0/object').price, 'arguments/0'), {
          content: 't.is(v.price, 50)',
          filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
          line: 94
        }), 50);
        t.truthy(_rec13._expr(_rec13._capt(_rec13._capt(v, 'arguments/0/object').createdAt, 'arguments/0'), {
          content: 't.truthy(v.createdAt)',
          filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
          line: 95
        }));
        t.is(_rec14._expr(_rec14._capt(_rec14._capt(_rec14._capt(user, 'arguments/0/object/object').state, 'arguments/0/object').currentOrderKey, 'arguments/0'), {
          content: 't.is(user.state.currentOrderKey, firstKey)',
          filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
          line: 96
        }), _rec15._expr(_rec15._capt(firstKey, 'arguments/1'), {
          content: 't.is(user.state.currentOrderKey, firstKey)',
          filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
          line: 96
        }));
        t.end();
      });
    };

    var handler = new _saveOrderResponseHandler2.default({ response: response, user: user });
    handler.call(assert);
  });
});

_ava2.default.cb('handles error while saving location', function (t) {
  var err = 'Sample error';

  // assert function, to be executed on `act`
  var assert = function assert(actualMessage) {
    var _rec16 = new _powerAssertRecorder(),
        _rec17 = new _powerAssertRecorder();

    var expectedMessage = 'Error in SaveOrderResponseHandler (geoFire): ' + err;
    t.is(_rec16._expr(_rec16._capt(actualMessage, 'arguments/0'), {
      content: 't.is(actualMessage, expectedMessage)',
      filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
      line: 112
    }), _rec17._expr(_rec17._capt(expectedMessage, 'arguments/1'), {
      content: 't.is(actualMessage, expectedMessage)',
      filepath: 'test/response-handlers/submit-order/save-order-response-handler-test.js',
      line: 112
    }));
    t.end();

    // cleanup
    console.log = tmp; // eslint-disable-line no-use-before-define
  };

  // arrange: replace `console.log` with `assert` function created above
  var tmp = console.log;
  console.log = assert;

  // arrange: create fake geoFire, it will replace `handler.geoFire`
  var fakeGeoFire = { set: function set() {
      return new _promise2.default(function (resolve, reject) {
        reject(err);
      });
    } };

  // act
  var handler = new _saveOrderResponseHandler2.default({ response: response });
  handler.geoFire = fakeGeoFire;
  handler.call(function () {});
});
//# sourceMappingURL=../../../node_modules/.cache/ava/af9688a866dc67237866ddf5f0017bef.js.map