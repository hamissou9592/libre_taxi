'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LibreTaxi, free and open source ride sharing platform.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Copyright (C) 2016-2017  Roman Pushkin
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            it under the terms of the GNU Affero General Public License as
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            published by the Free Software Foundation, either version 3 of the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            but WITHOUT ANY WARRANTY; without even the implied warranty of
or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GNU Affero General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            You should have received a copy of the GNU Affero General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        */

/* eslint-disable no-new */


var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _radius = require('../../src/conditions/radius');

var _radius2 = _interopRequireDefault(_radius);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var settings = { MAX_RADIUS: 10 };

(0, _ava2.default)('can be constructed with default parameters', function (t) {
  var _rec = new _powerAssertRecorder();

  var n = new _radius2.default('1', settings);
  t.is(_rec._expr(_rec._capt(_rec._capt(n, 'arguments/0/object').type, 'arguments/0'), {
    content: 't.is(n.type, \'radius\')',
    filepath: 'test/conditions/radius-test.js',
    line: 27
  }), 'radius');
});

(0, _ava2.default)('should be truthy when numeric', function (t) {
  var _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder(),
      _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder(),
      _rec7 = new _powerAssertRecorder(),
      _rec8 = new _powerAssertRecorder();

  t.truthy(_rec2._expr(_rec2._capt(_rec2._capt(new _radius2.default(5, _rec2._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.truthy(new Radius(5, settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 31
  }));
  t.truthy(_rec3._expr(_rec3._capt(_rec3._capt(new _radius2.default('1', _rec3._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.truthy(new Radius(\'1\', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 32
  }));
  t.truthy(_rec4._expr(_rec4._capt(_rec4._capt(new _radius2.default('5', _rec4._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.truthy(new Radius(\'5\', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 33
  }));
  t.truthy(_rec5._expr(_rec5._capt(_rec5._capt(new _radius2.default(' 5', _rec5._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.truthy(new Radius(\' 5\', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 34
  }));
  t.truthy(_rec6._expr(_rec6._capt(_rec6._capt(new _radius2.default('5 ', _rec6._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.truthy(new Radius(\'5 \', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 35
  }));
  t.truthy(_rec7._expr(_rec7._capt(_rec7._capt(new _radius2.default(' 5 ', _rec7._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.truthy(new Radius(\' 5 \', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 36
  }));
  t.truthy(_rec8._expr(_rec8._capt(_rec8._capt(new _radius2.default('  5  ', _rec8._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.truthy(new Radius(\'  5  \', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 37
  }));
});

(0, _ava2.default)('should be falsy when not numeric', function (t) {
  var _rec9 = new _powerAssertRecorder(),
      _rec10 = new _powerAssertRecorder(),
      _rec11 = new _powerAssertRecorder();

  t.falsy(_rec9._expr(_rec9._capt(_rec9._capt(new _radius2.default('asd', _rec9._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.falsy(new Radius(\'asd\', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 41
  }));
  t.falsy(_rec10._expr(_rec10._capt(_rec10._capt(new _radius2.default(_rec10._capt(undefined, 'arguments/0/callee/object/arguments/0'), _rec10._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.falsy(new Radius(undefined, settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 42
  }));
  t.falsy(_rec11._expr(_rec11._capt(_rec11._capt(new _radius2.default(' ', _rec11._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.falsy(new Radius(\' \', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 43
  }));
});

(0, _ava2.default)('should be falsy when out of range', function (t) {
  var _rec12 = new _powerAssertRecorder(),
      _rec13 = new _powerAssertRecorder(),
      _rec14 = new _powerAssertRecorder();

  t.falsy(_rec12._expr(_rec12._capt(_rec12._capt(new _radius2.default('11', _rec12._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.falsy(new Radius(\'11\', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 47
  }));
  t.falsy(_rec13._expr(_rec13._capt(_rec13._capt(new _radius2.default('0', _rec13._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.falsy(new Radius(\'0\', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 48
  }));
  t.falsy(_rec14._expr(_rec14._capt(_rec14._capt(new _radius2.default('-1', _rec14._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.falsy(new Radius(\'-1\', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 49
  }));
});

(0, _ava2.default)('should be truthy when in range', function (t) {
  var _rec15 = new _powerAssertRecorder(),
      _rec16 = new _powerAssertRecorder(),
      _rec17 = new _powerAssertRecorder(),
      _rec18 = new _powerAssertRecorder(),
      _rec19 = new _powerAssertRecorder(),
      _rec20 = new _powerAssertRecorder();

  t.truthy(_rec15._expr(_rec15._capt(_rec15._capt(new _radius2.default('1', _rec15._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.truthy(new Radius(\'1\', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 53
  }));
  t.truthy(_rec16._expr(_rec16._capt(_rec16._capt(new _radius2.default('2', _rec16._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.truthy(new Radius(\'2\', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 54
  }));
  t.truthy(_rec17._expr(_rec17._capt(_rec17._capt(new _radius2.default('3', _rec17._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.truthy(new Radius(\'3\', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 55
  }));
  t.truthy(_rec18._expr(_rec18._capt(_rec18._capt(new _radius2.default('8', _rec18._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.truthy(new Radius(\'8\', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 56
  }));
  t.truthy(_rec19._expr(_rec19._capt(_rec19._capt(new _radius2.default('9', _rec19._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.truthy(new Radius(\'9\', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 57
  }));
  t.truthy(_rec20._expr(_rec20._capt(_rec20._capt(new _radius2.default('10', _rec20._capt(settings, 'arguments/0/callee/object/arguments/1')), 'arguments/0/callee/object').call(), 'arguments/0'), {
    content: 't.truthy(new Radius(\'10\', settings).call())',
    filepath: 'test/conditions/radius-test.js',
    line: 58
  }));
});
//# sourceMappingURL=../../node_modules/.cache/ava/e89f698155ad2b93d9ad9b28f07c04e3.js.map